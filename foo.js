window.foo = {"src/components/action-toolbar/action-toolbar.js":[{"description":"A ActionToolbar widget.\n\n== How to use a ActionToolbar in a component:\n\nIn your file\n\n  import ActionToolbar from 'carbon/lib/components/action-toolbar';\n\nTo render a ActionToolbar:\n\n  let actions = [{\n    text: \"Add Subscriptions\",\n    icon: \"basket\"\n  }, {\n    text: \"Delete\",\n    icon: \"bin\"\n  }];\n\n  <ActionToolbar total={ count } actions={ actions } />\n\n Additional props for Link or Icon can be passed in the action object.\n\n@class ActionToolbar\n@constructor","methods":[{"name":"actions","docblock":"@method actions\n@return {Array}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Array"}},"description":null},{"name":"isActive","docblock":"@method isActive\n@return {Boolean}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Boolean"}},"description":null},{"name":"mainClasses","docblock":"@method mainClasses\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":null},{"name":"buildAction","docblock":"@method buildAction\n@return {Object} JSX","modifiers":[],"params":[{"name":"action"},{"name":"index"}],"returns":{"description":"JSX","type":{"name":"Object"}},"description":null}],"props":{"actions":{"type":{"name":"array"},"required":true,"description":"The actions to display in the toolbar\n\n@property actions - each action is object with the action attributes\n@type {Array}"},"className":{"type":{"name":"string"},"required":false,"description":"A custom class name for the component.\n\n@property className\n@type {String}"}}}],"src/components/animated-menu-button/animated-menu-button.js":[{"description":"An AnimatedMenuButton widget.\n\n== How to use an AnimatedMenuButton in a component:\n\nIn your file\n\n  import AnimatedMenuButton from 'carbon/lib/components/animated-menu-button';\n\nTo render a AnimatedMenuButton, pass children to be rendered in the expanded menu:\n\n <AnimatedMenuButton>\n   <Row>\n     <div>\n       <h2 className=\"title\">Foo</h2>\n         <p><Link href='#'>Bar</Link></p>\n      </div>\n    </Row>\n </AnimatedMenuButton>\n\n@class AnimatedMenuButton\n@constructor","methods":[{"name":"labelHTML","docblock":"Getter for label HTML\n\n@method labelHTML\n@return {HTML} HTML for label.","modifiers":[],"params":[],"returns":{"description":"HTML for label.","type":{"name":"HTML"}},"description":"Getter for label HTML"},{"name":"innerHTML","docblock":"Getter for inner HTML of menu\n\n@method innerHTML\n@return {HTML} HTML for menu contents.","modifiers":[],"params":[],"returns":{"description":"HTML for menu contents.","type":{"name":"HTML"}},"description":"Getter for inner HTML of menu"},{"name":"mainClasses","docblock":"Getter for widget's main classes.\n\n@method mainClasses\n@return {String} Classnames","modifiers":[],"params":[],"returns":{"description":"Classnames","type":{"name":"String"}},"description":"Getter for widget's main classes."},{"name":"componentProps","docblock":"A getter that returns any supplied custom props along with default props.\n\n@method componentProps\n@return {Object} props including class names & event handlers.","modifiers":[],"params":[],"returns":{"description":"props including class names & event handlers.","type":{"name":"Object"}},"description":"A getter that returns any supplied custom props along with default props."},{"name":"closeIcon","docblock":"Returns a close icon with touch handler.\n\n@method closeIcon\n@return {HTML} html for close icon","modifiers":[],"params":[],"returns":{"description":"html for close icon","type":{"name":"HTML"}},"description":"Returns a close icon with touch handler."},{"name":"openHandler","docblock":"Opens handler on event.\n\n@method openHandler\n@return {void}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"void"}},"description":"Opens handler on event."},{"name":"closeHandler","docblock":"Closes menu on event.\n\n@method closeHandler\n@return {void}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"void"}},"description":"Closes menu on event."},{"name":"handleBlur","docblock":"Handles blur of expanded menu.\n\n@method handleBlur\n@return {void}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"void"}},"description":"Handles blur of expanded menu."}],"props":{"children":{"type":{"name":"node"},"required":false,"description":"Children elements\n\n@property children\n@type {Node}"},"className":{"type":{"name":"string"},"required":false,"description":"Custom className\n\n@property className\n@type {String}"},"direction":{"type":{"name":"string"},"required":false,"description":"The direction in which the menu expands.\n\nOptions: right, left\n\n@property direction\n@type {String}\n@default left","defaultValue":{"value":"'left'","computed":false}},"label":{"type":{"name":"string"},"required":false,"description":"A label to display at the top of the expanded menu.\n\n@property label\n@type {String}e"},"size":{"type":{"name":"string"},"required":false,"description":"The size of the menu.\n\nOptions: small, smed, medium, mlarge, large\n\n@property size\n@type {String}\n@default medium","defaultValue":{"value":"'medium'","computed":false}}}}],"src/components/app-wrapper/app-wrapper.js":[{"description":"Manages the width and containment of your application.","methods":[{"name":"classes","docblock":"Returns the classes for the component.\n\n@method classes\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns the classes for the component."}],"props":{"children":{"type":{"name":"node"},"required":false,"description":"Children elements\n\n@property children\n@type {Node}"},"className":{"type":{"name":"string"},"required":false,"description":"Custom className\n\n@property className\n@type {String}"}}}],"src/components/button/button.js":[{"description":"A button widget.\n\n== How to use a Button in a component:\n\nIn your file:\n\n  import Button from 'carbon/lib/components/button';\n\nTo render the Button:\n\n  <Button>Save</Button>\n\n ### Themes\n\n Currently available button themese are blue(default), green, red, magenta, grey & white.\n\nFor additional properties specific to this component, see propTypes and defaultProps.\n\n@class Button\n@constructor","methods":[{"name":"element","docblock":"Build the element to render.\n\n@method element\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Build the element to render."}],"props":{"as":{"type":{"name":"string"},"required":false,"description":"Customizes the appearance, can be set to 'primary' or 'secondary'.\n\n@property as\n@type {String|Array}\n@default 'secondary'","defaultValue":{"value":"'secondary'","computed":false}},"children":{"type":{"name":"node"},"required":true,"description":"A required prop. This is what the button will display.\n\n@property children\n@type {Multiple}"},"disabled":{"type":{"name":"bool"},"required":false,"description":"Gives the button a disabled state.\n\n@property disabled\n@type {Boolean}\n@default false","defaultValue":{"value":"false","computed":false}},"theme":{"type":{"name":"string"},"required":false,"description":"Gives the button a color.\n\n@property theme\n@type {String}\n@default blue","defaultValue":{"value":"'blue'","computed":false}},"size":{"type":{"name":"string"},"required":false,"description":"Determines size of button.\n\n@property size\n@type {String}\n@default medium","defaultValue":{"value":"'medium'","computed":false}}}}],"src/components/button-toggle/button-toggle.js":[{"description":"","methods":[{"name":"mainClasses","docblock":"Main Class getter\n\n@method mainClasses\n@return {void}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"void"}},"description":"Main Class getter"},{"name":"inputClasses","docblock":"Uses the inputClasses method provided by the decorator to add additional classes.\n\n@method inputClasses\n@return {String} input className","modifiers":[],"params":[],"returns":{"description":"input className","type":{"name":"String"}},"description":"Uses the inputClasses method provided by the decorator to add additional classes."},{"name":"buttonIcon","docblock":"Returns the markup for the buttonIcon.\n\n@method buttonIcon\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns the markup for the buttonIcon."},{"name":"inputProps","docblock":"A getter that combines props passed down from the input decorator with\ntextbox specific props.\n\n@method inputProps\n@return {Object} props for the input","modifiers":[],"params":[],"returns":{"description":"props for the input","type":{"name":"Object"}},"description":"A getter that combines props passed down from the input decorator with\ntextbox specific props."},{"name":"additionalInputContent","docblock":"Returns additional content to sit inline with the input.\n\n@method additionalInputContent\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns additional content to sit inline with the input."}],"props":{"buttonIcon":{"type":{"name":"string"},"required":false,"description":"Which buttonIcon the button should render.\n\n@property buttonIcon\n@type {String}"},"buttonIconSize":{"type":{"name":"string"},"required":false,"description":"Sets the size of the buttonIcon (eg. large)\n\n@property buttonIconSize\n@type {String}"}}}],"src/components/carousel/carousel.js":[{"description":"","methods":[{"name":"nextClasses","docblock":"Gets the next div classes\n\n@method nextClasses","modifiers":[],"params":[],"returns":null,"description":"Gets the next div classes"},{"name":"previousClasses","docblock":"Gets the previous div classes\n\n@method previousClasses","modifiers":[],"params":[],"returns":null,"description":"Gets the previous div classes"},{"name":"previousButtonClasses","docblock":"Gets the previous button classes\n\n@method previousButtonClasses","modifiers":[],"params":[],"returns":null,"description":"Gets the previous button classes"},{"name":"nextButtonClasses","docblock":"Gets the next button classes\n\n@method nextButtonClasses","modifiers":[],"params":[],"returns":null,"description":"Gets the next button classes"},{"name":"slideSelectorClasses","docblock":"Gets the slide selector footer classes\n\n@method nextButtonClasses","modifiers":[],"params":[],"returns":null,"description":"Gets the slide selector footer classes"},{"name":"onPreviousClick","docblock":"Handles clicking on the previous button\n\n@method onPreviousClick","modifiers":[],"params":[],"returns":null,"description":"Handles clicking on the previous button"},{"name":"onNextClick","docblock":"Handles clicking on the next button\n\n@method onNextClick","modifiers":[],"params":[],"returns":null,"description":"Handles clicking on the next button"},{"name":"onSlideSelection","docblock":"Handles clicking slide selector\n\n@method onSlideSelection","modifiers":[],"params":[{"name":"ev"}],"returns":null,"description":"Handles clicking slide selector"},{"name":"enableButtonsAfterTimeout","docblock":"Re-enables the next and previous buttons after timeout\n\n@method enableButtonsAfterTimeout\n@return {Void}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Void"}},"description":"Re-enables the next and previous buttons after timeout"},{"name":"mainClasses","docblock":"Gets the main classes\n\n@method mainClasses","modifiers":[],"params":[],"returns":null,"description":"Gets the main classes"},{"name":"previousButtonProps","docblock":"Gets the props for the previous button\n\n@method previousButtonProps","modifiers":[],"params":[],"returns":null,"description":"Gets the props for the previous button"},{"name":"nextButtonProps","docblock":"Gets the props for the next button\n\n@method nextButtonProps","modifiers":[],"params":[],"returns":null,"description":"Gets the props for the next button"},{"name":"numOfSlides","docblock":"Gets the number of slides\n\n@method numOfSlides","modifiers":[],"params":[],"returns":null,"description":"Gets the number of slides"},{"name":"visibleSlide","docblock":"Gets the currently visible slide\n\n@method visibleSlide","modifiers":[],"params":[],"returns":null,"description":"Gets the currently visible slide"},{"name":"slideSelector","docblock":"Renders the slideSelector footer\n\n@method slideSelector","modifiers":[],"params":[],"returns":null,"description":"Renders the slideSelector footer"}],"props":{"className":{"type":{"name":"string"},"required":false,"description":"Custom className\n\n@property className\n@type {String}"},"initialSlideIndex":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":false,"description":"The selected tab on page load\n\n@property initialSelectedTabId\n@type {String}\n@default firstTab","defaultValue":{"value":"0","computed":false}},"children":{"type":{"name":"union","value":[{"name":"array"},{"name":"object"}]},"required":false,"description":"Individual tabs\n\n@property children\n@type {Object | Array}"}}}],"src/components/carousel/slide/slide.js":[{"description":"","methods":[]}],"src/components/checkbox/checkbox.js":[{"description":"A Checkbox widget.\n\n== How to use a Checkbox in a component:\n\nIn your file:\n\n  import Checkbox from 'carbon/lib/components/checkbox';\n\nTo render the Checkbox:\n\n  <Checkbox name=\"myCheckbox\" />\n\n@class Checkbox\n@constructor\n@decorators {Input,InputLabel,InputValidation}","methods":[{"name":"mainClasses","docblock":"Uses the mainClasses method provided by the decorator to add additional classes.\n\n@method mainClasses\n@return {String} Main className","modifiers":[],"params":[],"returns":{"description":"Main className","type":{"name":"String"}},"description":"Uses the mainClasses method provided by the decorator to add additional classes."},{"name":"inputClasses","docblock":"Uses the inputClasses method provided by the decorator to add additional classes.\n\n@method inputClasses\n@return {String} input className","modifiers":[],"params":[],"returns":{"description":"input className","type":{"name":"String"}},"description":"Uses the inputClasses method provided by the decorator to add additional classes."},{"name":"inputProps","docblock":"A getter that combines props passed down from the input decorator with\ncheckbox specific props.\n\n@method inputProps\n@return {Object} Props to be applied to the input","modifiers":[],"params":[],"returns":{"description":"Props to be applied to the input","type":{"name":"Object"}},"description":"A getter that combines props passed down from the input decorator with\ncheckbox specific props."},{"name":"hiddenInputProps","docblock":"A getter for hidden input props.\n\n@method hiddenInputProps\n@return {Object} Props to be applied to the hidden input","modifiers":[],"params":[],"returns":{"description":"Props to be applied to the hidden input","type":{"name":"Object"}},"description":"A getter for hidden input props."},{"name":"checkboxSprite","docblock":"Return the svg image for the checkbox\n\n@return {Object} JSX svg","modifiers":[],"params":[],"returns":{"description":"JSX svg","type":{"name":"Object"}},"description":"Return the svg image for the checkbox"},{"name":"additionalInputContent","docblock":"Extends the input content to include the checkbox sprite\n\n@method additionalInputContent\n@return {Object} JSX additional content inline with input","modifiers":[],"params":[],"returns":{"description":"JSX additional content inline with input","type":{"name":"Object"}},"description":"Extends the input content to include the checkbox sprite"},{"name":"fieldHelpClasses","docblock":"Returns classes for field help.\n\n@method fieldHelpClasses\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns classes for field help."}],"props":{"defaultChecked":{"type":{"name":"bool"},"required":false,"description":"Sets the checked state of the checkbox\n\n@property defaultChecked\n@type {Boolean}\n@default false","defaultValue":{"value":"false","computed":false}},"reverse":{"type":{"name":"bool"},"required":false,"description":"Reverses label and checkbox display\n\n@property reverse\n@type {Boolean}\n@default false","defaultValue":{"value":"false","computed":false}}}}],"src/components/content/content.js":[{"description":"Renders content with a title and body text.\n\n@class Content\n@constructor","methods":[{"name":"classes","docblock":"Returns the HTML classes for the component.\n\n@method\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns the HTML classes for the component."},{"name":"titleStyle","docblock":"Returns styling for the title element.\n\n@method titleStyle\n@return {Object}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Object"}},"description":"Returns styling for the title element."},{"name":"bodyStyle","docblock":"Returns styling for the body element.\n\n@method bodyStyle\n@return {Object}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Object"}},"description":"Returns styling for the body element."}],"props":{"children":{"type":{"name":"node"},"required":false,"description":"The body of the content component.\n\n@property children\n@type {Object}"},"title":{"type":{"name":"string"},"required":false,"description":"The title of the content component.\n\n@property title\n@type {String}"},"as":{"type":{"name":"string"},"required":false,"description":"Applies a theme to the Content\nValue: primary, secondary\n\n@property as\n@type {String}\n@default primary","defaultValue":{"value":"\"primary\"","computed":false}},"inline":{"type":{"name":"bool"},"required":false,"description":"Displays the content inline with it's title.\n\n@property inline\n@type {Boolean}\n@default false","defaultValue":{"value":"false","computed":false}},"align":{"type":{"name":"string"},"required":false,"description":"Aligns the content (left, center or right).\n\n@property align\n@type {String}\n@default left","defaultValue":{"value":"\"left\"","computed":false}},"titleWidth":{"type":{"name":"string"},"required":false,"description":"Sets a custom width for the title element.\n\n@property titleWidth\n@type {String}"},"bodyFullWidth":{"type":{"name":"bool"},"required":false,"description":"Over-rides the calculation of body width based on titleWidth\nSometimes we need the body to be full width while keeping a title width similar to other widths\n\n@property bodyFullWidth\n@type {Boolean}\n@default false","defaultValue":{"value":"false","computed":false}}}}],"src/components/create/create.js":[{"description":"","methods":[{"name":"linkProps","docblock":"Returns the props for the component.\n\n@method linkProps\n@return {Object}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Object"}},"description":"Returns the props for the component."}],"props":{"children":{"type":{"name":"node"},"required":false,"description":"Children elements\n\n@property children\n@type {Node}"},"className":{"type":{"name":"string"},"required":false,"description":"Custom className\n\n@property className\n@type {String}"}}}],"src/components/date/date.js":[{"description":"A Date widget.\n\n== How to use a Date in a component:\n\nIn your file\n\n  import Date from 'carbon/lib/components/Date';\n\nTo render the Date:\n\n  <Date name=\"myDate\" />\n\n@class Date\n@constructor\n@decorators {Input,InputIcon,InputLabel,InputValidation}","methods":[{"name":"inputProps","docblock":"A getter that combines props passed down from the input decorator with\ndate specific props.\n\n@method inputProps\n@return {Object} props for the visible input","modifiers":[],"params":[],"returns":{"description":"props for the visible input","type":{"name":"Object"}},"description":"A getter that combines props passed down from the input decorator with\ndate specific props."},{"name":"hiddenInputProps","docblock":"A getter for hidden input props.\n\n@method hiddenInputProps\n@return {Object} props for the hidden input","modifiers":[],"params":[],"returns":{"description":"props for the hidden input","type":{"name":"Object"}},"description":"A getter for hidden input props."},{"name":"mainClasses","docblock":"Uses the mainClasses method provided by the decorator to add additional classes\n\n@method mainClasses\n@return {String} Main className","modifiers":[],"params":[],"returns":{"description":"Main className","type":{"name":"String"}},"description":"Uses the mainClasses method provided by the decorator to add additional classes"},{"name":"inputClasses","docblock":"Uses the inputClasses method provided by the decorator to add additional classes.\n\n@method inputClasses\n@return {String} input className","modifiers":[],"params":[],"returns":{"description":"input className","type":{"name":"String"}},"description":"Uses the inputClasses method provided by the decorator to add additional classes."},{"name":"additionalInputContent","docblock":"Extends the input content to include the input icon.\n\n@method additionalInputContent\n@return {Object} JSX additional content inline with input","modifiers":[],"params":[],"returns":{"description":"JSX additional content inline with input","type":{"name":"Object"}},"description":"Extends the input content to include the input icon."},{"name":"datePickerProps","docblock":"A getter that returns datepicker specific props\n\n@method datePickerProps\n@return {Object}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Object"}},"description":"A getter that returns datepicker specific props"},{"name":"navBarProps","docblock":"A getter that returns navbar specific props\n\n@method navBarProps\n@return {Object} props for the navbar","modifiers":[],"params":[],"returns":{"description":"props for the navbar","type":{"name":"Object"}},"description":"A getter that returns navbar specific props"},{"name":"renderDatePicker","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"_sanitizeDateInput","docblock":"Sanitizes all valid date separators ( . - 'whitespace' ) replacing them\nwith a slash\n\nThis allows us to compare against one separator in the i18n string. DD/MM/YYYY\n\n@method _sanitizeDateInput\n@private\n@return {String} sanitized input","modifiers":[],"params":[{"name":"input"}],"returns":{"description":"sanitized input","type":{"name":"String"}},"description":"Sanitizes all valid date separators ( . - 'whitespace' ) replacing them\nwith a slash\n\nThis allows us to compare against one separator in the i18n string. DD/MM/YYYY"}],"props":{"minDate":{"type":{"name":"string"},"required":false,"description":"Minimum possible date\n\n@property minDate\n@type {String}"},"maxDate":{"type":{"name":"string"},"required":false,"description":"Maximum possible date\n\n@property maxDate\n@type {String}"},"defaultValue":{"defaultValue":{"value":"moment().format(\"YYYY-MM-DD\")","computed":true}}}}],"src/components/decimal/decimal.js":[{"description":"A decimal widget.\n\n== How to use a Decimal in a component:\n\nIn your file\n\n  import Decimal from 'carbon/lib/components/decimal';\n\nTo render the Decimal:\n\n  <Decimal name=\"myDecimal\" />\n\n@class Decimal\n@constructor\n@decorators {Input,InputLabel,InputValidation}","methods":[{"name":"value","docblock":"Returns the current value or default value.\n\n@method value\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns the current value or default value."},{"name":"inputProps","docblock":"A getter that combines props passed down from the input decorator with\ntextbox specific props.\n\n@method inputProps\n@return {Object} props to apply to input field","modifiers":[],"params":[],"returns":{"description":"props to apply to input field","type":{"name":"Object"}},"description":"A getter that combines props passed down from the input decorator with\ntextbox specific props."},{"name":"hiddenInputProps","docblock":"A getter for hidden input props.\n\n@method hiddenInputProps\n@return {Object} props to apply to hidden field","modifiers":[],"params":[],"returns":{"description":"props to apply to hidden field","type":{"name":"Object"}},"description":"A getter for hidden input props."},{"name":"mainClasses","docblock":"Uses the mainClasses method provided by the decorator to add additional classes.\n\n@method mainClasses\n@return {String} Main className","modifiers":[],"params":[],"returns":{"description":"Main className","type":{"name":"String"}},"description":"Uses the mainClasses method provided by the decorator to add additional classes."},{"name":"inputClasses","docblock":"Uses the inputClasses method provided by the decorator to add additional classes.\n\n@method inputClasses\n@return {String} Input className","modifiers":[],"params":[],"returns":{"description":"Input className","type":{"name":"String"}},"description":"Uses the inputClasses method provided by the decorator to add additional classes."}],"props":{"align":{"type":{"name":"string"},"required":false,"description":"Sets the default value alignment\n\n@property align\n@type {String}\n@default 'right'","defaultValue":{"value":"\"right\"","computed":false}},"precision":{"type":{"name":"string"},"required":false,"description":"Sets the pricision of the field\n\n@property precision\n@type {Integer}\n@default 2","defaultValue":{"value":"2","computed":false}}}}],"src/components/detail/detail.js":[{"description":"","methods":[{"name":"classes","docblock":"Returns the classes for the component.\n\n@method classes\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns the classes for the component."}],"props":{"icon":{"type":{"name":"string"},"required":false,"description":"The type of icon to use.\n\n@property icon\n@type {Object}"},"footnote":{"type":{"name":"string"},"required":false,"description":"A small detail to display under the main content.\n\n@property footnote\n@type {String}"}}}],"src/components/dropdown/dropdown.js":[{"description":"A dropdown widget.\n\n== How to use a dropdown in a component:\n\nIn your file\n\n  import Dropdown from 'carbon/lib/components/dropdown';\n\nTo render a Dropdown:\n\n  <Dropdown name=\"foo\" options={ foo } onChange={ myChangeHandler } />\n\nThe developer should pass data to the store as JSON. e.g.\n\n  foo: [{ id: 1, name: \"Foo\" }, { id: 2, name: \"Bar\" }]\n\n@class Dropdown\n@constructor\n@decorators {List,Input,InputIcon,InputLabel,InputValidation}","methods":[{"name":"selectValue","docblock":"Selects the value for the component\n\n@method selectValue\n@param {String} val","modifiers":[],"params":[{"name":"val","description":null,"type":{"name":"String"}},{"name":"visibleVal"}],"returns":null,"description":"Selects the value for the component"},{"name":"updateScroll","docblock":"Sets the scroll position for the list\n\n@method updateScroll\n@param {HTML} list ul element\n@param {HTML} element current li element\n@return {Void}","modifiers":[],"params":[{"name":"list","description":"ul element","type":{"name":"HTML"}},{"name":"nextItem"}],"returns":{"description":null,"type":{"name":"Void"}},"description":"Sets the scroll position for the list"},{"name":"options","docblock":"Returns the list options in the correct format\n\n@method options","modifiers":[],"params":[],"returns":null,"description":"Returns the list options in the correct format"},{"name":"inputProps","docblock":"A getter that combines props passed down from the input decorator with\ndropdown specific props.\n\n@method inputProps","modifiers":[],"params":[],"returns":null,"description":"A getter that combines props passed down from the input decorator with\ndropdown specific props."},{"name":"hiddenInputProps","docblock":"A getter for hidden input props.\n\n@method hiddenInputProps","modifiers":[],"params":[],"returns":null,"description":"A getter for hidden input props."},{"name":"listBlockProps","docblock":"Properties to be assigned to the list.\n\n@method listProps","modifiers":[],"params":[],"returns":null,"description":"Properties to be assigned to the list."},{"name":"listProps","docblock":"Properties to be assigned to the list.\n\n@method listProps","modifiers":[],"params":[],"returns":null,"description":"Properties to be assigned to the list."},{"name":"mainClasses","docblock":"Uses the mainClasses method provided by the decorator to add additional classes.\n\n@method mainClasses","modifiers":[],"params":[],"returns":null,"description":"Uses the mainClasses method provided by the decorator to add additional classes."},{"name":"inputClasses","docblock":"Uses the inputClasses method provided by the decorator to add additional classes.\n\n@method inputClasses","modifiers":[],"params":[],"returns":null,"description":"Uses the inputClasses method provided by the decorator to add additional classes."},{"name":"listHTML","docblock":"Getter to return HTML for list to render method.\n\n@method listHTML","modifiers":[],"params":[],"returns":null,"description":"Getter to return HTML for list to render method."},{"name":"results","docblock":"Function that returns search results. Builds each list item with relevant handlers and classes.\n\n@method results","modifiers":[],"params":[{"name":"options"}],"returns":null,"description":"Function that returns search results. Builds each list item with relevant handlers and classes."},{"name":"additionalInputContent","docblock":"Extends the input content to include the input icon.\n\n@method additionalInputContent","modifiers":[],"params":[],"returns":null,"description":"Extends the input content to include the input icon."},{"name":"showArrow","docblock":"Determines whether dropdown arrow is displayed\n\n@method showArrow\n@return {Boolean}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Boolean"}},"description":"Determines whether dropdown arrow is displayed"}],"props":{"value":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"}]},"required":false,"description":"The ID value for the component\n\n@property value\n@type {String}"},"options":{"type":{"name":"object"},"required":true,"description":"The options to be displayed in the dropdown. Should be set in the store and passed from the parent component.\n\nThis should be an Immutable object.\n\n@property options\n@type {object}"},"cacheVisibleValue":{"type":{"name":"bool"},"required":false,"description":"Determines if the visibleValue will be cached or not.\n\n@property cacheVisibleValue\n@type {boolean}","defaultValue":{"value":"false","computed":false}}}}],"src/components/fieldset/fieldset.js":[{"description":"Fieldset component.\n\nThis component will stack inputs together.","methods":[{"name":"legend","docblock":"Returns the legend if on is defined.\n\n@method legend\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns the legend if on is defined."}],"props":{"legend":{"type":{"name":"string"},"required":false,"description":"A label for the fieldset.\n\n@property legend\n@type {String}"}}}],"src/components/filter/filter.js":[{"description":"@class Filter\n@constructor","methods":[{"name":"classes","docblock":"Returns the classes for the filter.\n\n@method classes\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns the classes for the filter."}],"props":{"align":{"type":{"name":"string"},"required":false,"description":"Aligns the children in the filter.\n\n@property align\n@type {String}\n@default left","defaultValue":{"value":"'left'","computed":false}}}}],"src/components/flash/flash.js":[{"description":"A Flash widget.\n\nThe flash is rendered in two sections: a ventral message 'flash', and a\ndorsal coloured, expanding 'slider'.\n\n== How to use an Flash in a component:\n\nIn your file\n\n  import Flash from 'carbon/lib/components/flash';\n\nTo render a Flash, setup open and cancel handlers in your view to trigger\nthe message on and off:\n\n <Flash open={ openStatus } onDismiss={ myOnDismiss } message='Alert!' />\n\nBy default, the flash renders with a clickable close icon that hooks up with the onDismiss function.\n\nTo instead have the flash disappear after a given time period, pass a prop of timeout in milliseconds.\n\n <Flash open={ openStatus } onDismiss={ myOnDismiss } message='Alert!' timeout={ 2000 }/>\n\nThe flash message can be formatted in the following ways:\n\n * A string: \"Alert\"\n * An array: [\"Message One\", \"Message Two\"]\n * An object with description: { description: \"My description\" }\n * An object of key/value pairs: { first_name: \"is required\", last_name: \"is required\" }\n * An object with description with nested key/value pairs:\n   { description: { first_name: \"is required\", last_name: \"is required\" } }\n\nIf a message is too long, it can be proxied to a dialog by adding `::more::` in your description.\n\n let message = \"This is too long ::more:: This sentence is proxied to a dialog.\"\n\n@class Flash\n@constructor","methods":[{"name":"iconType","docblock":"Returns the icon to display depending on type\n\n@method iconType\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns the icon to display depending on type"},{"name":"description","docblock":"Parses the message object to get the appropriate description\n\n@method description\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Parses the message object to get the appropriate description"},{"name":"flashHTML","docblock":"Returns the computed HTML for the flash.\n\n@method flashHTML\n@return {Object} JSX for flash","modifiers":[],"params":[],"returns":{"description":"JSX for flash","type":{"name":"Object"}},"description":"Returns the computed HTML for the flash."},{"name":"sliderHTML","docblock":"Returns the computed HTML for the slider.\n\n@method flashHTML\n@return {Object} JSX for flash","modifiers":[],"params":[],"returns":{"description":"JSX for flash","type":{"name":"Object"}},"description":"Returns the computed HTML for the slider."},{"name":"classes","docblock":"Returns the classes for the component.\n\n@method classes\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns the classes for the component."}],"props":{"onDismiss":{"type":{"name":"func"},"required":true,"description":"A custom close event handler\n\n@property onDismiss\n@type {Function}"},"open":{"type":{"name":"bool"},"required":true,"description":"Sets the open state of the flash.\n\n@property open\n@type {Boolean}\n@default false"},"as":{"type":{"name":"string"},"required":false,"description":"Type of notification.\n(see the 'iconColorSets' for possible values)\n\n@property as\n@type {String}\n@default 'success'","defaultValue":{"value":"'success'","computed":false}},"message":{"type":{"name":"union","value":[{"name":"string"},{"name":"object"},{"name":"array"}]},"required":true,"description":"Contents of message.\n\n@property message\n@type {String|Object|Array}"},"timeout":{"type":{"name":"number"},"required":false,"description":"Time for flash to remain on screen\n\n@property timeout\n@type {Number} in milliseconds"}}}],"src/components/form/form.js":[{"description":"A Form widget.\n\n== How to use a Form in a component:\n\nIn your file\n\n  import Form from 'carbon/lib/components/form';\n\nTo render a Form:\n\n  <Form>\n    <Textbox />\n    <Textbox />\n    <Date />\n  </Form>\n\nForm provides the ability to hook into the form handle submission method.\nBy passing afterFormValidation or beforeFormValidation you can add custom\nvalidation logic and prevent the form submission using ev.preventDefault()\n\n@class Form\n@constructor","methods":[{"name":"mainClasses","docblock":"Main class getter\n\n@method mainClasses\n@return {String} Main className","modifiers":[],"params":[],"returns":{"description":"Main className","type":{"name":"String"}},"description":"Main class getter"},{"name":"buttonClasses","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"cancelButton","docblock":"Gets the cancel button for the form\n\n@method cancelButton\n@return {Object} JSX cancel button","modifiers":[],"params":[],"returns":{"description":"JSX cancel button","type":{"name":"Object"}},"description":"Gets the cancel button for the form"},{"name":"additionalActions","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"saveButton","docblock":"Gets the save button for the form\n@method saveButton\n@return {Object} JSX save button","modifiers":[],"params":[],"returns":{"description":"JSX save button","type":{"name":"Object"}},"description":"Gets the save button for the form"}],"props":{"activeInput":{"type":{"name":"element"},"required":false,"description":"currently active input which is used to track which error message to show on the form\n\n@property activeInput\n@type {Input}\n@default null","defaultValue":{"value":"null","computed":false}},"cancel":{"type":{"name":"bool"},"required":false,"description":"Cancel button is shown if true\n\n@property cancel\n@type {Boolean}\n@default true","defaultValue":{"value":"true","computed":false}},"afterFormValidation":{"type":{"name":"func"},"required":false,"description":"Custom function that is called immediately\nafter the form validates\n\n@property afterFormValidation\n@type {Function}"},"beforeFormValidation":{"type":{"name":"func"},"required":false,"description":"Custom function that is called immediately\nbefore the form validates\n\n@property beforeFormValidation\n@type {Function}"},"buttonAlign":{"type":{"name":"string"},"required":false,"description":"Alignment of submit button\n\n@ property\n@type {String}","defaultValue":{"value":"'right'","computed":false}},"saving":{"type":{"name":"bool"},"required":false,"description":"Determines if the form is in a saving state\n\n@property saving\n@type {Boolean}\n@default false","defaultValue":{"value":"false","computed":false}},"validateOnMount":{"type":{"name":"bool"},"required":false,"description":"If true, will validate the form on mount\n\n@property validateOnMount\n@type {Boolean}\n@default false","defaultValue":{"value":"false","computed":false}},"cancelText":{"type":{"name":"string"},"required":false,"description":"Text for the cancel button\n\n@property cancelText\n@type {String}\n@default \"Cancel\""},"cancelButtonProps":{"type":{"name":"object"},"required":false,"description":"Properties for the cancel button\n\n@property cancelButtonProps\n@type {Object}"},"saveText":{"type":{"name":"string"},"required":false,"description":"Text for the save button\n\n@property saveText\n@type {String}\n@default \"Save\""},"saveButtonProps":{"type":{"name":"object"},"required":false,"description":"Properties for the save button\n\n@property saveButtonProps\n@type {Object}"},"onCancel":{"type":{"name":"func"},"required":false,"description":"Custom function for Cancel button onClick\n\n@property onCancel\n@type {Function}"},"save":{"type":{"name":"bool"},"required":false,"description":"Hide or show the save button\n\n@property saveFalse\n@type {Boolean}","defaultValue":{"value":"true","computed":false}},"additionalActions":{"type":{"name":"node"},"required":false,"description":"Additional actions rendered next to the save and cancel buttons\n\n@property additionalActions\n@type {String|JSX}"},"onSubmit":{"type":{"name":"func"},"required":false,"description":"Custom callback for when form will submit\n\n@property onSubmit\n@type {Function}"}}}],"src/components/heading/heading.js":[{"description":"UI for a heading header.","methods":[{"name":"help","docblock":"Returns the help component.\n\n@method help\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns the help component."},{"name":"back","docblock":"Returns the back button.\n\n@method back\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns the back button."},{"name":"subheader","docblock":"Returns the subheader.\n\n@method subheader\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns the subheader."},{"name":"classes","docblock":"Returns the classes for the component.\n\n@method classes\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns the classes for the component."},{"name":"separator","docblock":"Returns the separator if enabled and needed.\n\n@method separator\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns the separator if enabled and needed."}],"props":{"title":{"type":{"name":"union","value":[{"name":"string"},{"name":"object"}]},"required":false,"description":"Defines the title for the heading.\n\n@property title\n@type {String|Object}"},"subheader":{"type":{"name":"union","value":[{"name":"string"},{"name":"object"}]},"required":false,"description":"Defines the subheader for the heading.\n\n@property subheader\n@type {String|Object}"},"help":{"type":{"name":"string"},"required":false,"description":"Defines the help text for the heading.\n\n@property help\n@type {String}"},"helpLink":{"type":{"name":"string"},"required":false,"description":"Defines the help link for the heading.\n\n@property helpLink\n@type {String}"},"backLink":{"type":{"name":"string"},"required":false,"description":"Defines the a href for the back link.\n\n@property backLink\n@type {String}"},"divider":{"type":{"name":"bool"},"required":false,"description":"Adds a divider below the heading and the content.\n\n@property divider\n@type {Boolean}\n@default true","defaultValue":{"value":"true","computed":false}},"separator":{"type":{"name":"bool"},"required":false,"description":"Adds a separator between the title and the subheader.\n\n@property separator\n@type {Boolean}\n@default false","defaultValue":{"value":"false","computed":false}}}}],"src/components/help/help.js":[{"description":"A Help widget.\n\n== How to use a Help in a component:\n\nIn your file\n\n  import Help from 'carbon/lib/components/help';\n\nTo render a help component:\n\n  <Help>{ this.props.helpMessage }</Help>\n\n You can also pass additional props of tooltipPosition and tooltipAlign.\n\n@class Help\n@constructor\n@decorators {TooltipDecorator}","methods":[{"name":"mainClasses","docblock":"Return component classes\n\n@method mainClasses\n@return {String} classes","modifiers":[],"params":[],"returns":{"description":"classes","type":{"name":"String"}},"description":"Return component classes"}],"props":{"children":{"type":{"name":"string"},"required":false,"description":"Message to display in tooltip\n\n@property children\n@type {String}"},"tooltipPosition":{"type":{"name":"string"},"required":false,"description":"Position of tooltip relative to target\n\n@property tooltipPosition\n@type {String} Options: { top, bottom, right, left }\n@default top","defaultValue":{"value":"'top'","computed":false}},"tooltipAlign":{"type":{"name":"string"},"required":false,"description":"Aligment of pointer\n\n@property tooltipAlign\n@type {String} Options: { top, bottom, right, left, center }\n@default center","defaultValue":{"value":"'center'","computed":false}},"href":{"type":{"name":"string"},"required":false,"description":"A path for the anchor\n\n@property href\n@type {String}"}}}],"src/components/i18n/i18n.js":[{"description":"A widget for internationalisation of text.\n\n== How to use an I18n component:\n\nIn your file:\n\n  import I18n from 'carbon/lib/components/i18n';\n\nTo render the message:\n\n <I18n scope='foo' />\n\nFor additional properties specific to this component, see propTypes.\n\n@class I18n\n@constructor","methods":[{"name":"renderMarkup","docblock":null,"modifiers":[],"params":[{"name":"inline","type":null},{"name":"props","type":null},{"name":"translation","type":null}],"returns":null},{"name":"marked","docblock":null,"modifiers":[],"params":[{"name":"inline","type":null}],"returns":null}],"props":{"markdown":{"type":{"name":"bool"},"required":false,"description":"Whether to compile the value as markdown\n\n@property markdown\n@type {Boolean}\n@default false"},"inline":{"type":{"name":"bool"},"required":false,"description":"Whether to enclose the text in a <span> or a <div>\n\n@property inline\n@type {Boolean}\n@default true","defaultValue":{"value":"true","computed":false}},"scope":{"type":{"name":"string"},"required":false,"description":"The key to lookup for a localised value\n\n@property scope\n@type {String}\n@default undefined"},"options":{"type":{"name":"object"},"required":false,"description":"Additional options to pass to I18n\n\n@property options\n@type {Object}\n@default undefined"}}}],"src/components/icon/icon.js":[{"description":"An Icon widget.\n\n== How to use an Icon in a component:\n\nIn your file\n\n  import Icon from 'carbon/lib/components/icon';\n\nTo render an Icon:\n\n  <Icon type='foo' />\n\n'type' is a required prop\n\nThis widget follows this pattern: https://facebook.github.io/react/blog/2015/09/10/react-v0.14-rc1.html#stateless-function-components\n\nFor information on how to use the Tooltip Decorator see the decorator docs.\n\n@class Icon\n@constructor","methods":[{"name":"renderIcon","docblock":"Checks if we have an SVG available, otherwise will fall back\nto using the icon font.\n\n@method renderIcon\n@return {HTML}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"HTML"}},"description":"Checks if we have an SVG available, otherwise will fall back\nto using the icon font."},{"name":"componentProps","docblock":"Return component props\n\n@method componentProps\n@return {Object} props","modifiers":[],"params":[],"returns":{"description":"props","type":{"name":"Object"}},"description":"Return component props"},{"name":"mainClasses","docblock":"Return component classes\n\n@method mainClasses\n@return {String} classes","modifiers":[],"params":[],"returns":{"description":"classes","type":{"name":"String"}},"description":"Return component classes"},{"name":"type","docblock":"Return Icon type with overrides\n\n@method type\n@return {String} icon type","modifiers":[],"params":[],"returns":{"description":"icon type","type":{"name":"String"}},"description":"Return Icon type with overrides"}],"props":{"type":{"type":{"name":"string"},"required":true,"description":"Icon type\n\n@property  type\n@type      {String}"},"bgSize":{"type":{"name":"enum","value":[{"value":"'small'","computed":false},{"value":"'medium'","computed":false},{"value":"'large'","computed":false}]},"required":false,"description":"Background size\n\n@property  bgSize\n@type      {String}\n@default   'small'","defaultValue":{"value":"'small'","computed":false}},"bgShape":{"type":{"name":"enum","value":[{"value":"'square'","computed":false},{"value":"'rounded-rect'","computed":false},{"value":"'circle'","computed":false}]},"required":false,"description":"Background shape\n\n@property  bgShape\n@type      {String}"},"bgTheme":{"type":{"name":"string"},"required":false,"description":"Background color theme\n\n@property  bgTheme\n@type      {String}"}}}],"src/components/link/link.js":[{"description":"A link widget.\n\n== How to use a Link in a component:\n\nIn your file:\n\n  import Link from 'carbon/lib/components/link';\n\nTo render the Link:\n\n <Link href='foo'>Main Page</Link>\n\nFor additional properties specific to this component, see propTypes.\n\n@class Link\n@constructor","methods":[{"name":"componentProps","docblock":"Getter for componet properties.\n\n@method componentProps\n@return {Object} props","modifiers":[],"params":[],"returns":{"description":"props","type":{"name":"Object"}},"description":"Getter for componet properties."},{"name":"componentClasses","docblock":"Getter for componet classes.\n\n@method componentClasses\n@return {String} class names","modifiers":[],"params":[],"returns":{"description":"class names","type":{"name":"String"}},"description":"Getter for componet classes."},{"name":"iconLeft","docblock":"Returns the icon if enabled and aligned to the left.\n\n@method iconLeft\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns the icon if enabled and aligned to the left."},{"name":"iconRight","docblock":"Returns the icon if enabled and aligned to the right.\n\n@method iconRight\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns the icon if enabled and aligned to the right."},{"name":"icon","docblock":"Returns the markup for the icon.\n\n@method icon\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns the markup for the icon."},{"name":"tabIndex","docblock":"Returns 0 or -1 for tabindex\n\n@method tabIndex\n@return {String} 0 or -1","modifiers":[],"params":[],"returns":{"description":"0 or -1","type":{"name":"String"}},"description":"Returns 0 or -1 for tabindex"},{"name":"typeRegex","docblock":"Regex for finding 'href:' or 'to:',\n\n@method typeRegex\n@return {Regex}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Regex"}},"description":"Regex for finding 'href:' or 'to:',"},{"name":"linkTypes","docblock":"A hash of the different link types.\n\n@method linkTypes\n@return {Object}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Object"}},"description":"A hash of the different link types."},{"name":"linkType","docblock":"Returns the correct link type based on the given props.\n\n@method linkType\n@return {Object}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Object"}},"description":"Returns the correct link type based on the given props."},{"name":"url","docblock":"Returns the parsed URL for the link.\n\n@method url\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns the parsed URL for the link."},{"name":"onKeyDown","docblock":"Triggers the onClick event for the enter key\n\n@method onKeyDown\n@param {Object} ev","modifiers":[],"params":[{"name":"ev","description":null,"type":{"name":"Object"}}],"returns":null,"description":"Triggers the onClick event for the enter key"}],"props":{"disabled":{"type":{"name":"bool"},"required":false,"description":"Gives the link a disabled state.\n\n@property disabled\n@type {Boolean}\n@default undefined"},"icon":{"type":{"name":"string"},"required":false,"description":"Renders an icon inline with the link.\n\n@property icon\n@type {String}\n@default undefined"},"iconAlign":{"type":{"name":"string"},"required":false,"description":"Configures the alignment of the icon (left or right).\n\n@property iconAlign\n@type {String}\n@default left","defaultValue":{"value":"'left'","computed":false}},"tabbable":{"type":{"name":"bool"},"required":false,"description":"Allows the <a> tag to be set in or out of the tab order of the page\nBoolean is used as tabindex > 0 is not really necessary, HTML order should\ntake precedence\n\n@property tabbable\n@type {Boolean}\n@default true","defaultValue":{"value":"true","computed":false}},"to":{"type":{"name":"string"},"required":false,"description":"Use `to` to use the React Router link. You can also prefix your value\nwith `to:` or `href:` to override the prop type.\n\n@property to\n@type {String}\n@default undefined"},"href":{"type":{"name":"string"},"required":false,"description":"Use `href` to use a generic anchor. You can also prefix your value\nwith `to:` or `href:` to override the prop type.\n\n@property href\n@type {String}\n@default undefined"},"tooltipMessage":{"type":{"name":"string"},"required":false,"description":"The message for this tooltip\n\n@property\n@type {String}"},"tooltipPosition":{"type":{"name":"string"},"required":false,"description":"The position of this tooltip: top, bottom, left or right\n\n@property\n@default top\n@type {String}"},"tooltipAlign":{"type":{"name":"string"},"required":false,"description":"The alignment of this tooltip: left, right or center\n\n@property\n@default center\n@type {String}"}}}],"src/components/menu/menu-item/menu-item.js":[{"description":"Renders a menu item for the menu component.","methods":[{"name":"content","docblock":"Determines what content will be rendered for the menu item.\n\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Determines what content will be rendered for the menu item."},{"name":"classes","docblock":"Returns the classes for the component.\n\n@method classes\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns the classes for the component."}],"props":{"alternate":{"type":{"name":"bool"},"required":false,"description":"Defines whether alternate row styling should be applied\n0..n blocks of 1..n menu items can be marked as `alternate` which adds a secondary style\n\n@property alternate\n@type {Boolean}"},"submenuDirection":{"type":{"name":"string"},"required":false,"description":"Defines which direction the submenu will hang eg. left/right\n\n@property submenuDirection\n@type {String}","defaultValue":{"value":"\"right\"","computed":false}},"selected":{"type":{"name":"bool"},"required":false,"description":"Is the menu item the currently selected item.\n\n@property selected\n@type {Boolean}"},"divide":{"type":{"name":"bool"},"required":false,"description":"(for submenus) renders with a divide between items.\n\n@property divide\n@type {Boolean}"},"submenu":{"type":{"name":"union","value":[{"name":"string"},{"name":"object"}]},"required":false,"description":"A title for the menu item that has a submenu.\n\n@property submenu\n@type {String | Object}"},"href":{"type":{"name":"string"},"required":false,"description":"The href to use for the menu item.\n\n@property href\n@type {String}"},"to":{"type":{"name":"string"},"required":false,"description":"The to link to use for the menu item.\n\n@property to\n@type {String}"},"target":{"type":{"name":"string"},"required":false,"description":"The target to use for the menu item.\n\n@property target\n@type {String}"}}}],"src/components/menu/menu.js":[{"description":"Renders a menu component, with menu items.","methods":[{"name":"classes","docblock":"Returns the classes for the component.\n\n@method classes\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns the classes for the component."}],"props":{"as":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"\"primary\"","computed":false}}}}],"src/components/menu/submenu-block/submenu-block.js":[{"description":"Renders a menu block for inside of a submenu.","methods":[{"name":"classes","docblock":"Returns the classes for the component.\n\n@method classes\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns the classes for the component."}]}],"src/components/menu-list/menu-list-item/menu-list-item.js":[{"description":"","methods":[{"name":"mainClasses","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"children":{"type":{"name":"union","value":[{"name":"string"},{"name":"number"},{"name":"array"},{"name":"object"}]},"required":true,"description":""}}}],"src/components/menu-list/menu-list.js":[{"description":"== How to use a MenuList in a component:\n\nIn your file:\n\n  import { MenuList, MenuListItem } from 'carbon/lib/components/menu-list';\n\nTo render the Link:\n\n <MenuList href='foo'>\n   <MenuListItem>foo</MenuListItem>\n   <MenuListItem>bar</MenuListItem>\n   <MenuListItem>\n     <MenuList>\n       I'm nestable\n     </MenuList>\n   </MenuListItem>\n </MenuList>\n\nFor additional properties specific to this component, see propTypes.\n\n@class MenuList\n@constructor","methods":[{"name":"onSearch","docblock":"Actions *","modifiers":[],"params":[{"name":"ev"}],"returns":null,"description":"Actions *"},{"name":"toggleChildren","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"showMenuItems","docblock":"Helpers *","modifiers":[],"params":[],"returns":null,"description":"Helpers *"},{"name":"filterHTML","docblock":"Markup *","modifiers":[],"params":[],"returns":null,"description":"Markup *"},{"name":"mainClasses","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"menuItems","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"menuTitle","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"children":{"type":{"name":"array"},"required":true,"description":""},"className":{"type":{"name":"string"},"required":false,"description":""},"filter":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"title":{"type":{"name":"string"},"required":false,"description":""},"collapsible":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"true","computed":false}}}}],"src/components/message/message.js":[{"description":"A Message widget.\n\n== How to use a Message in a component:\n\nIn your file:\n\n  import Message from 'carbon/lib/components/message';\n\nTo render the Message:\n\n  <Message title=\"This is a title\" open={ true }>\n    My message content\n  </Message>\n\nAdditionally you can pass optional props to the Message component\n\n  as: Customizes the appearence of the message changing the colour\n      (see the 'iconColorSets' for possible values).\n\n@class Message\n@constructor","methods":[{"name":"componentClasses","docblock":"Classes to be applied to the component.\n\n@method componentClasses","modifiers":[],"params":[],"returns":null,"description":"Classes to be applied to the component."},{"name":"dismissIcon","docblock":"Content rendered for dismiss X\n\n@method dismissIcon","modifiers":[],"params":[],"returns":null,"description":"Content rendered for dismiss X"},{"name":"titleHTML","docblock":"HTML for the title\n\n@method titleHTML","modifiers":[],"params":[],"returns":null,"description":"HTML for the title"},{"name":"typeClasses","docblock":"Classes to be applied to type background.\n\n@method componentClasses","modifiers":[],"params":[],"returns":null,"description":"Classes to be applied to type background."},{"name":"messageContent","docblock":"Content rendered for the message.\n\n@method messageContent","modifiers":[],"params":[],"returns":null,"description":"Content rendered for the message."}],"props":{"as":{"type":{"name":"string"},"required":false,"description":"Sets the theme for the component.\n(see the 'iconColorSets' for possible values)\n\n@property as\n@type {String}\n@default 'info'","defaultValue":{"value":"'info'","computed":false}},"transparent":{"type":{"name":"bool"},"required":false,"description":"Determines if the message background is transparent or filled defined by the as property.\n\n@property transparent\n@type {Boolean}\n@default false","defaultValue":{"value":"false","computed":false}},"open":{"type":{"name":"bool"},"required":false,"description":"Determines if the message is open.\n\n@property open\n@type {Boolean}\n@default true","defaultValue":{"value":"true","computed":false}},"onDismiss":{"type":{"name":"func"},"required":false,"description":"Callback for when dismissed.\n\n@property onDismiss\n@type {Function}"},"roundedCorners":{"type":{"name":"bool"},"required":false,"description":"Determines if the corners of the message are rounded\n\n@property roundedCorners\n@type {Boolean}\n@default true","defaultValue":{"value":"true","computed":false}},"border":{"type":{"name":"bool"},"required":false,"description":"Determines if a border is applied to the message\n\n@property border\n@type {Boolean}\n@default true","defaultValue":{"value":"true","computed":false}}}}],"src/components/modal/modal.js":[{"description":"A Modal Component\n\nAbstract base class for all modals\n\n== How to use a Modal in a component\n\nIn your file\n\n  import Modal from 'carbon/lib/components/modal'\n\nExtends from the modal\n\n  class MyModal extends Modal\n\nOverride several methods\n\nget onOpening() // Called by componentDidUpdate when dialog opens\nget onClosing() // Called by componentDidUpdate when dialog closes\nget mainClasses() // Classes to apply to parent div\nget modalHTML() // JSX displayed when open\nget transitionName() // Transisition name for ReactCSSTransitionGroup\n\nOptional Override\nget backgroundTransitionName() // Transisition name for background fade\n\n\n@class Modal\n@constructor","methods":[{"name":"backgroundHTML","docblock":"Returns HTML for the background.\n\n@method backgroundHTML\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns HTML for the background."},{"name":"onOpening","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"onClosing","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"mainClasses","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"modalHTML","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"transitionName","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"backgroundTransitionName","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"onCancel":{"type":{"name":"func"},"required":false,"description":"A custom close event handler\n\n@property onCancel\n@type {Function}"},"open":{"type":{"name":"bool"},"required":true,"description":"Sets the open state of the modal\n\n@property open\n@type {Boolean}\n@default false","defaultValue":{"value":"false","computed":false}},"enableBackgroundUI":{"type":{"name":"bool"},"required":false,"description":"Determines if the background is disabled\nwhen the modal is open\n\n@property enableBackgroundUI\n@type {Boolean}\n@default true","defaultValue":{"value":"false","computed":false}},"disableEscKey":{"type":{"name":"bool"},"required":false,"description":"Determines if the Esc Key closes the modal\n\n@property disableEscKey\n@type {Boolean}\n@default true","defaultValue":{"value":"false","computed":false}}}}],"src/components/mount-in-app/mount-in-app.js":[{"description":"Can be used to integrate React components into\npre-existing user interfaces.\n\n== How to use a MountInApp component:\n\nImport the component:\n\n  import MountInApp from 'carbon/lib/components/mount-in-app';\n\nImagine that your pre-existing user interface has\na <div id=\"put_carbon_component_here\" /> inside\nwhich you want to put your new React component.\n\nTo do that create a new React component that renders:\n\n  <MountInApp targetId=\"put_carbon_component_here\">\n    <div>Hello</div>\n    <div>I'm a react component rendered in an existing UI</div>\n  </MountInApp>","methods":[{"name":"contentHtml","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"targetElement","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"targetId":{"type":{"name":"string"},"required":false,"description":""}}}],"src/components/multi-step-wizard/multi-step-wizard.js":[{"description":"A MultiStepWizard widget.\n\n== How to use a MultiStepWizard in a component:\n\nIn your file:\n\n  import MultiStepWizard from 'components/multi-step-wizard';\n\nTo render the Wizard:\n\n <MultiStepWizard steps={ [<Step1 />, <Step2 />, ...] } />\n\nThe component rendering the wizard must pass down a prop of 'steps' where you need to provide an array of custom\nstep components. Note that Step components must be objects and you can pass props to Step components, e.g.\n<MultiStepWizard steps={ [<Textbox onChange={ this.updateTextboxValue } />, <div className='some-style' />] } />\n\nYou also need to provide a 'onSubmit' handler to handle a submit event.\n\nThe wizard also takes a 'currentStep' prop with an integer to specify a step you want to start with.\ne.g. currentStep={ 2 }. The wizard starts with the first step by default.\n\nThe wizard disables inactive steps by default. If you wish to enable inactive steps, pass a 'enableInactiveSteps'\nprop and set it to true.\n\nThe wizard generates Next and Back buttons by default. If you wish to use custom buttons to replace the default ones\nin a step component, you can pass a 'defaultButton' prop in the corresponding step component and set it to false.\nAlso, if you want to add additional buttons beside the default Next and Back buttons, you can pass a 'extraButtons'\nprop in the corresponding step component with your extra buttons.\nIndividual Steps can be optionally disabled by a passing a prop of `enabled={ false }`.\ne.g. <MultiStepWizard steps={ [<Step1 defaultButton={ false } />, <Step2 />] } />\n     <MultiStepWizard steps={ [<Step1 />, <Step2 extraButtons={ [<Button>Cancel</Button>] }) />] } />\n     <MultiStepWizard steps={ [<Step1 />, <Step2 enabled={ false } />] } />\n\nThe wizard provides the ability to hook into the handle next/back/submit methods.\n(1) By passing a 'beforeSubmitValidation' prop in the wizard, you can add custom logic before a submit event, and\n    the submit event can be completed only when the 'beforeSubmitValidation' prop returns 'true'.\n(2) By passing 'onNext' prop in the corresponding step component, you can add custom logic when moving a step forward, and\n    the 'onNext' prop overrides the step's default behaviour of moving next.\n(3) By passing 'onBack' prop in the corresponding step component, you can add custom logic when moving a step backward, and\n    the 'onBack' prop overrides the step's default behaviour of moving back.\ne.g. <MultiStepWizard steps={ [<Step1 onNext={ this.customMethodOnNext }/>, <Step2 onBack={ this.customMethodOnBack }) />] } />\n     <MultiStepWizard beforeSubmitValidation={ this.customValidation } onSubmit={ this.customMethodOnSubmit } />\n\nIf you want to complete the wizard without going through steps, you can pass a 'completed' prop and set it to true.\n\n@class MultiStepWizard\n@constructor","methods":[{"name":"totalSteps","docblock":"Get total number of steps\n\n@method totalSteps\n@return {Number}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Number"}},"description":"Get total number of steps"},{"name":"wizardStepsHTML","docblock":"Returns the computed HTML for the wizard's steps.\n\n@method wizardStepsHTML\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns the computed HTML for the wizard's steps."},{"name":"mainClasses","docblock":"Returns classes for the wizard.\n\n@method mainClasses\n@return {String} Main className","modifiers":[],"params":[],"returns":{"description":"Main className","type":{"name":"String"}},"description":"Returns classes for the wizard."}],"props":{"steps":{"type":{"name":"arrayOf","value":{"name":"object"}},"required":true,"description":"Individual steps\n\n@property steps\n@type {Array}"},"beforeSubmitValidation":{"type":{"name":"func"},"required":false,"description":"Custom function that is called immediately before a submit event\n\n@property beforeSubmitValidation\n@type {Function}"},"onSubmit":{"type":{"name":"func"},"required":true,"description":"A custom submit event handler\n\n@property onSubmit\n@type {Function}"},"currentStep":{"type":{"name":"number"},"required":false,"description":"Current step\n\n@property currentStep\n@type {Number}\n@default 1","defaultValue":{"value":"1","computed":false}},"enableInactiveSteps":{"type":{"name":"bool"},"required":false,"description":"Determines if the wizard disables inactive steps\n\n@property enableInactiveSteps\n@type {Boolean}\n@default false","defaultValue":{"value":"false","computed":false}},"completed":{"type":{"name":"bool"},"required":false,"description":"The completion state of the wizard\n\n@property enableInactiveSteps\n@type {Boolean}\n@default false","defaultValue":{"value":"false","computed":false}}}}],"src/components/multi-step-wizard/step/step.js":[{"description":"A Step widget.\nThis widget is part of MultiStepWizard and it is a wrapper for a step element that is passed to MultiStepWizard.\n\n== How to use a Step Widget in a component:\n See MultiStepWizard widget\n\n@class Step\n@constructor","methods":[{"name":"wizard","docblock":"Gets the step's wizard\n\n@method wizard\n@return {Object}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Object"}},"description":"Gets the step's wizard"},{"name":"currentStepNumber","docblock":"Gets the current step number\n\n@method currentStepNumber\n@return {Number}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Number"}},"description":"Gets the current step number"},{"name":"isFirstStep","docblock":"Checks if the step is the first step\n\n@method isFirstStep\n@return {Boolean}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Boolean"}},"description":"Checks if the step is the first step"},{"name":"isLastStep","docblock":"Checks if the step is the last step\n\n@method isLastStep\n@return {Boolean}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Boolean"}},"description":"Checks if the step is the last step"},{"name":"stepDisabled","docblock":"Checks if step component should be disabled.\n\n@method stepDisabled\n@return {Boolean}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Boolean"}},"description":"Checks if step component should be disabled."},{"name":"stepProcessed","docblock":"Checks if step has been processed.\n\n@method stepProcessed\n@return {Boolean}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Boolean"}},"description":"Checks if step has been processed."},{"name":"stepsCompleted","docblock":"Checks if all steps are completed\n\n@method stepsCompleted\n@return {Boolean}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Boolean"}},"description":"Checks if all steps are completed"},{"name":"stepHTML","docblock":"Returns the computed HTML for the step.\n\n@method stepHTML\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns the computed HTML for the step."},{"name":"buttonHTML","docblock":"Returns the computed HTML for the buttons.\n\n@method buttonHTML\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns the computed HTML for the buttons."},{"name":"indicatorHTML","docblock":"Returns the computed HTML for the step indicator.\n\n@method indicatorHTML\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns the computed HTML for the step indicator."},{"name":"indicatorStatus","docblock":"Returns the step indicator status.\n\n@method indicatorStatus\n@return {Boolean}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Boolean"}},"description":"Returns the step indicator status."},{"name":"extraButtonHTML","docblock":"Returns the computed HTML for the extra buttons.\n\n@method extraButtonHTML\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns the computed HTML for the extra buttons."},{"name":"mainClasses","docblock":"Main class getter\n\n@method mainClasses\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Main class getter"}],"props":{"stepNumber":{"type":{"name":"number"},"required":true,"description":"Step number\n\n@property stepNumber\n@type {Number}"},"defaultButton":{"type":{"name":"bool"},"required":false,"description":"Determines if the step renders default buttons\n\n@property defaultButton\n@type {Boolean}\n@default true","defaultValue":{"value":"true","computed":false}},"onNext":{"type":{"name":"func"},"required":false,"description":"Custom function that is called when moving the step forward.\nThis function overrides the step's default behaviour of moving next.\n\n@property onNext\n@type {Function}"},"onBack":{"type":{"name":"func"},"required":false,"description":"Custom function that is called when moving the step backward.\nThis function overrides the step's default behaviour of moving back.\n\n@property onBack\n@type {Function}"},"extraButtons":{"type":{"name":"arrayOf","value":{"name":"object"}},"required":false,"description":"Additional buttons\n\n@property extraButtons\n@type {Array}"},"enabled":{"type":{"name":"bool"},"required":false,"description":"Determines if the step is enabled\n\n@property enabled\n@type {Boolean}"}}}],"src/components/navigation-bar/navigation-bar.js":[{"description":"Renders a full width application bar.","methods":[{"name":"classes","docblock":"Returns the classes for the component.\n\n@method classes\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns the classes for the component."}],"props":{"as":{"type":{"name":"string"},"required":false,"description":"Determines the style of the component eg. primary/secondary\n\n@property as\n@type {String}\n@default primary","defaultValue":{"value":"\"primary\"","computed":false}}}}],"src/components/number/number.js":[{"description":"A number widget. It only allows entering of a whole number with an\noptional minus sign.\n\n== How to use a Number in a component:\n\nIn your file\n\n  import Number from 'carbon/lib/components/number';\n\nTo render a Number:\n\n  <Number name=\"myNumber\" />\n\n@class Number\n@constructor\n@decorators {Input,InputLabel,InputValidation}","methods":[{"name":"mainClasses","docblock":"Main Class getter\n\n@method mainClasses\n@return {String} Main className","modifiers":[],"params":[],"returns":{"description":"Main className","type":{"name":"String"}},"description":"Main Class getter"},{"name":"inputClasses","docblock":"Input class getter\n\n@method inputClasses\n@return {String} Input className","modifiers":[],"params":[],"returns":{"description":"Input className","type":{"name":"String"}},"description":"Input class getter"},{"name":"inputProps","docblock":"A getter that combines props passed down from the input decorator with\nnumber specific props.\n\n@method inputProps\n@return {Object} props for the input","modifiers":[],"params":[],"returns":{"description":"props for the input","type":{"name":"Object"}},"description":"A getter that combines props passed down from the input decorator with\nnumber specific props."}]}],"src/components/pager/pager.js":[{"description":"A Pager widget.\n\n== How to use a Pager in a component:\n\nIn your file\n\n  import Pager from 'carbon/lib/components/pager';\n\nTo render a Pager:\n\n  <Pager currentPage='1' totalRecords='100' onPagination={ function(){} } />\n\n@class Pager","methods":[{"name":"maxPage","docblock":"Calculate the maximum page\n\n@method maxPage\n@return {Integer}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Integer"}},"description":"Calculate the maximum page"},{"name":"disablePrevious","docblock":"Should the previous arrow be disabled\n\n@method disablePrevious\n@return {Boolean}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Boolean"}},"description":"Should the previous arrow be disabled"},{"name":"disableNext","docblock":"Should the next arrow be disabled\n\n@method disableNext\n@return {Boolean}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Boolean"}},"description":"Should the next arrow be disabled"},{"name":"previousArrow","docblock":"Get previous arrow icon\n\n@method previousArrow\n@return {JSX}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"JSX"}},"description":"Get previous arrow icon"},{"name":"currentPageInput","docblock":"Get current page number input\n\n@method currentPageInput\n@return {JSX}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"JSX"}},"description":"Get current page number input"},{"name":"nextArrow","docblock":"Get next arrow icon\n\n@method nextArrow\n@return {JSX}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"JSX"}},"description":"Get next arrow icon"},{"name":"sizeSelectionDropdown","docblock":"Page Size Selection Dropdown\n\n@method sizeSelectionDropdown\n@return {JSX}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"JSX"}},"description":"Page Size Selection Dropdown"}],"props":{"currentPage":{"type":{"name":"string"},"required":true,"description":"Current visible page\n\n@property currentPage\n@type {String}"},"totalRecords":{"type":{"name":"string"},"required":true,"description":"Total number of records\n\n@property totalRecords\n@type {String}"},"onPagination":{"type":{"name":"func"},"required":true,"description":"Function called when any pager changes take place\nPageSize, Current Page\n\n@property onPagination\n@type {Function}"},"pageSize":{"type":{"name":"string"},"required":false,"description":"Pagination page size\n\n@property pageSize\n@type {String}","defaultValue":{"value":"'10'","computed":false}},"showPageSizeSelection":{"type":{"name":"bool"},"required":false,"description":"Should the page size selection dropdown be shown\n\n@property showPageSizeSelection\n@type {Boolean}","defaultValue":{"value":"false","computed":false}},"pageSizeSelectionOptions":{"type":{"name":"object"},"required":false,"description":"Set of page size options\n\n@property pageSizeSelectionOptions\n@type {Object}","defaultValue":{"value":"Immutable.fromJS([\n  { id: '10', name: 10 },\n  { id: '25', name: 25 },\n  { id: '50', name: 50 }\n])","computed":true}}}}],"src/components/pill/pill.js":[{"description":"A Pill widget.\n\n== How to use a Pill in a component:\n\nIn your file:\n\n  import Pill from 'carbon/lib/components/pill'\n\nTo render the Pill:\n\n  <Pill as='warning'>My warning text</Pill>\n\nAdditionally you can pass optional props to the Pill component\n\n  as: Customizes the appearence of the pill changing the colour.\n      (see the 'iconColorSets' for possible values).\n\n@class Pill\n@constructor","methods":[],"props":{"as":{"type":{"name":"string"},"required":false,"description":"Customizes the appearance through colour\n(see the 'iconColorSets' for possible values)\n\n@property as\n@type {String}\n@default 'info'","defaultValue":{"value":"'default'","computed":false}},"fill":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}},"children":{"type":{"name":"string"},"required":true,"description":"The text to display on the Pill\n\n@property children\n@type {String}"}}}],"src/components/pod/pod.js":[{"description":"A Pod widget.\n\nThis widget is a provides a wrapper in which to render other widgets.\n\n== How to use a Pod in a component:\n\nIn your file:\n\n  import Pod from 'carbon/lib/components/pod';\n\nIn the render the Pod:\n\n  <Pod />\n\n@class Pod\n@constructor","methods":[{"name":"podHeader","docblock":"Returns HTML and text for the pod header.\nIncludes:\n   Title\n   Collapsible arrow if collapsible\n\n@method podHeader","modifiers":[],"params":[],"returns":null,"description":"Returns HTML and text for the pod header.\nIncludes:\n   Title\n   Collapsible arrow if collapsible"},{"name":"podDescription","docblock":"Returns HTML and text for the pod description.\n\n@method podDescription","modifiers":[],"params":[],"returns":null,"description":"Returns HTML and text for the pod description."},{"name":"podCollapsible","docblock":"Returns the collapsible icon.\n\n@method podCollapsible","modifiers":[],"params":[],"returns":null,"description":"Returns the collapsible icon."},{"name":"podContent","docblock":"Returns the pod description and children.\n\n@method podContent","modifiers":[],"params":[],"returns":null,"description":"Returns the pod description and children."},{"name":"mainClasses","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"blockClasses","docblock":"Main Class getter\n\n@method blockClasses\n@return {String} Main className","modifiers":[],"params":[],"returns":{"description":"Main className","type":{"name":"String"}},"description":"Main Class getter"},{"name":"headerClasses","docblock":"Header classes getter\n\n@method headerClasses\n@return {String} header className","modifiers":[],"params":[],"returns":{"description":"header className","type":{"name":"String"}},"description":"Header classes getter"},{"name":"contentClasses","docblock":"Classes for the content.\n\n@method contentClasses\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Classes for the content."},{"name":"footerClasses","docblock":"Classes for the footer.\n\n@method footerClasses\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Classes for the footer."},{"name":"editActionClasses","docblock":"Classes for the edit action.\n\n@method editActionClasses\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Classes for the edit action."},{"name":"footer","docblock":"Returns the footer component.\n\n@method footer\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns the footer component."},{"name":"edit","docblock":"Returns the edit action if defined.\n\n@method edit\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns the edit action if defined."},{"name":"hoverOverEditEvents","docblock":"Returns event related props for triggering and highlighting edit functionality\n\n@method hoverOverEditEvents\n@return {Object}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Object"}},"description":"Returns event related props for triggering and highlighting edit functionality"},{"name":"shouldContentHaveEditProps","docblock":"Determines if the content pod should share the editProps\n\n@method shouldContentHaveEditProps\n@return {Boolean}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Boolean"}},"description":"Determines if the content pod should share the editProps"}],"props":{"border":{"type":{"name":"bool"},"required":false,"description":"Enables/disables the border around the pod.\n\n@property border\n@type {Boolean}\n@default true","defaultValue":{"value":"true","computed":false}},"padding":{"type":{"name":"string"},"required":false,"description":"Determines the padding around the pod.\nValues: \"none\", \"small\", \"medium\" or \"large\".\n\n@property padding\n@type {String}\n@default medium","defaultValue":{"value":"\"medium\"","computed":false}},"as":{"type":{"name":"string"},"required":false,"description":"Applies a theme to the Pod.\nValue: primary, secondary, tile\n\n@property as\n@type {String}\n@default primary","defaultValue":{"value":"\"primary\"","computed":false}},"collapsed":{"type":{"name":"bool"},"required":false,"description":"The collapsed state of the pod\n\nundefined - Pod is not collapsible\ntrue - Pod is closed\nfalse - Pod is open\n\n@property collapsed\n@type {Boolean}"},"title":{"type":{"name":"union","value":[{"name":"string"},{"name":"object"}]},"required":false,"description":"Title for the pod h4 element\nalways shown\n\n@property title\n@type {String}"},"subtitle":{"type":{"name":"string"},"required":false,"description":"Optional subtitle for the pod\n\n@property subtitle\n@type {String}"},"alignTitle":{"type":{"name":"string"},"required":false,"description":"Aligns the title to left, right or center\n\n@property alignTitle\n@type {String}\n@default left","defaultValue":{"value":"'left'","computed":false}},"description":{"type":{"name":"string"},"required":false,"description":"Description for the pod\nNot shown if collapsed\n\n@property title\n@type {String}"},"footer":{"type":{"name":"object"},"required":false,"description":"A component to render as a Pod footer.\n\n@property footer\n@type {String}"},"onEdit":{"type":{"name":"union","value":[{"name":"string"},{"name":"func"},{"name":"object"}]},"required":false,"description":"Supplies an edit action to the pod.\n\n@property onEdit\n@type {String|Function|Object}"},"editContentFullWidth":{"type":{"name":"bool"},"required":false,"description":"Determines if the editable pod content should be full width.\n\n@property editContentFullWidth\n@type {Boolean}"},"displayEditButtonOnHover":{"type":{"name":"bool"},"required":false,"description":"Determines if the edit button should be hidden until the user\nhovers over the content.\n\n@property displayEditButtonOnHover\n@type {Boolean}"},"triggerEditOnContent":{"type":{"name":"bool"},"required":false,"description":"Determines if clicking the pod content calls the onEdit action\n\n@property triggerEditOnContent\n@type {Boolean}"},"internalEditButton":{"type":{"name":"bool"},"required":false,"description":"Resets edit button styles to an older version\n\n@property internalEditButton\n@type {Boolean}"}}}],"src/components/portrait/portrait.js":[{"description":"A Portrait Widget.\n\n== How to use a Portrait in a component\n\nIn your file\n\n  import Portrait from 'carbon/lib/components/portrait';\n\nTo render the Portrait\n\n  <Portrait src='/my-image' alt='my image' />\n\nTo render a gravatar portrait\n\n  <Portrait gravatar='mygrav@email.com' />\n\nYou can pass a 'size' property to adjust the size of the portrait\n   The default is lmed\n   options: small, smed, lmed, large\n\nFor additional properties specific to this component, see propTypes.","methods":[{"name":"imgSrc","docblock":"Props for the HTML Img\n\n@method imgSrc\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Props for the HTML Img"},{"name":"gravatarSrc","docblock":"Gets src url based on passed gravatar email\n\n@method gravatarSrc\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Gets src url based on passed gravatar email"},{"name":"generateInitials","docblock":"Generates a graphic with initials.\n\n@method generateInitials\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Generates a graphic with initials."},{"name":"numericSizes","docblock":"Maps size to width/height value\n\n@method numericSizes\n@return {Object}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Object"}},"description":"Maps size to width/height value"},{"name":"mainClasses","docblock":"Main Class getter\n\n@method mainClasses\n@return {String} Main className","modifiers":[],"params":[],"returns":{"description":"Main className","type":{"name":"String"}},"description":"Main Class getter"},{"name":"initialsImage","docblock":"Return the html for the initials image.\n\n@method initialsImage\n@return {Object}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Object"}},"description":"Return the html for the initials image."},{"name":"avatarImage","docblock":"Return the html for the avatar image.\n\n@method avatarImage\n@return {Object}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Object"}},"description":"Return the html for the avatar image."},{"name":"sansInitialsImage","docblock":"Return the html for the Icon displayed in the event that both the image and initials are missing\n\n@method sansInitialsImage\n@return {Object}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Object"}},"description":"Return the html for the Icon displayed in the event that both the image and initials are missing"}],"props":{"size":{"type":{"name":"string"},"required":false,"description":"Size of the img\nOptions: small, smed, lmed, large\n\n@property size\n@type {String}","defaultValue":{"value":"'medium'","computed":false}},"src":{"type":{"name":"custom","raw":"(props) => {\n  if (!props.gravatar && !props.src) {\n    throw new Error(`Portrait requires a prop of 'src' OR a prop of 'gravatar'`);\n  } else if (props.gravatar && props.src) {\n    throw new Error(`Portrait requires a prop of 'src' OR a prop of 'gravatar' but not both`);\n  }\n}"},"required":false,"description":"Source of the image\n\n@property src\n@type {String}"},"gravatar":{"type":{"name":"string"},"required":false,"description":"Gravatar email\n\n@property src\n@type {String}"},"alt":{"type":{"name":"string"},"required":false,"description":"Alternate text for image\n\n@property src\n@type {String}"},"shape":{"type":{"name":"string"},"required":false,"description":"Shape of the portrait\nOptions - standard, circle, leaf\n\n@property shape\n@type {String}","defaultValue":{"value":"'standard'","computed":false}},"initials":{"type":{"name":"string"},"required":false,"description":"Initials to display as image\n\n@property initials\n@type {String}\n@default 'U'"},"darkBackground":{"type":{"name":"bool"},"required":false,"description":"If to use a dark background instead of a light background.\n\n@property darkBackground\n@type {Boolean}\n@default false"}}}],"src/components/profile/profile.js":[{"description":"Renders a user profile, with avatar.","methods":[{"name":"classes","docblock":"Returns the classes for the component.\n\n@method classes\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns the classes for the component."},{"name":"initials","docblock":"Returns the initials for the name.\n\n@method initials\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns the initials for the name."},{"name":"avatar","docblock":"Returns the avatar portion of the profile.\n\n@method avatar\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns the avatar portion of the profile."},{"name":"text","docblock":"Returns the text portion of the profile.\n\n@method text\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns the text portion of the profile."}],"props":{"name":{"type":{"name":"string"},"required":true,"description":"The user's name.\n\n@property name\n@type {String}"},"email":{"type":{"name":"string"},"required":true,"description":"The user's email.\n\n@property email\n@type {String}"},"initials":{"type":{"name":"string"},"required":false,"description":"The user's initials.\n\n@property initials\n@type {String}"},"large":{"type":{"name":"bool"},"required":false,"description":"Outputs a large name version.\n\n@property large\n@type {Boolean}"}}}],"src/components/radio-button/radio-button.js":[{"description":"A radiobutton widget.\n\n== How to use a RadioButton in a component:\n\nIn your file:\n\n  import RadioButton from 'carbon/lib/components/radio-button';\n\nTo render the radiobutton:\n\n <RadioButton name='frequency' value='weekly' label='Weekly'/>\n <RadioButton name='frequency' value='2weekly' label='2 Weekly' />\n <RadioButton name='frequency' value='4weekly' label='4 Weekly'/>\n <RadioButton name='frequency' value='monthly' label='Monthly' />\n\nFor additional properties specific to this component, see propTypes.\n\n@class RadioButton\n@constructor\n@decorators {Input, InputLabel, InputValidation}","methods":[{"name":"mainClasses","docblock":"Uses the mainClasses method provided by the decorator to add additional classes.\n\n@method mainClasses\n@return {String} Main className","modifiers":[],"params":[],"returns":{"description":"Main className","type":{"name":"String"}},"description":"Uses the mainClasses method provided by the decorator to add additional classes."},{"name":"inputClasses","docblock":"Uses the inputClasses method provided by the decorator to add additional classes.\n\n@method inputClasses\n@return {String} input className","modifiers":[],"params":[],"returns":{"description":"input className","type":{"name":"String"}},"description":"Uses the inputClasses method provided by the decorator to add additional classes."},{"name":"fieldHelpClasses","docblock":"Returns classes for field help.\n\n@method fieldHelpClasses\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns classes for field help."},{"name":"inputProps","docblock":"A getter that combines props passed down from the input decorator with\nradiobutton specific props.\n\n@method inputProps\n@return {Object} Props to be applied to the input","modifiers":[],"params":[],"returns":{"description":"Props to be applied to the input","type":{"name":"Object"}},"description":"A getter that combines props passed down from the input decorator with\nradiobutton specific props."},{"name":"radiobuttonSprite","docblock":"Return the svg image for the radiobutton\nAmended the svg contsruction to account for an issue in React\n@return {Object} JSX svg","modifiers":[],"params":[],"returns":{"description":"JSX svg","type":{"name":"Object"}},"description":"Return the svg image for the radiobutton\nAmended the svg contsruction to account for an issue in React"},{"name":"additionalInputContent","docblock":"Extends the input content to include the radiobutton sprite\n\n@method additionalInputContent\n@return {Object} JSX additional content inline with input","modifiers":[],"params":[],"returns":{"description":"JSX additional content inline with input","type":{"name":"Object"}},"description":"Extends the input content to include the radiobutton sprite"}],"props":{"defaultChecked":{"type":{"name":"bool"},"required":false,"description":"Sets the checked state of the radio button\n\n@property defaultChecked\n@type {Boolean}\n@default false","defaultValue":{"value":"false","computed":false}}}}],"src/components/rainbow/rainbow.js":[{"description":"A rainbow chart using the Highcharts API.\n\n== How to use a Rainbow in a component:\n\nIn your file:\n\n  import Rainbow from 'carbon/lib/components/rainbow';\n\nNote that the Rainbow component expects that you already have the Highcharts\nlibrary loaded. This may be true in case of some projects, which already have\nthat library available for their legacy code.\nIn other cases, you would need to import Highcharts before importing Rainbow:\n\n  import 'react-highcharts/dist/bundle/highcharts';\n\nTo render the Rainbow:\n\n  let myImmutableData = Immutable.fromJS([\n    {\n      y: 30,\n      name: 'First Bit',\n      label: 'label for first bit',\n      tooltip: 'more info about this bit',\n      color: '#000' # we supply color by default, but you can supply your own like this\n    }, {\n      y: 70,\n      name: 'Second Bit',\n      label: 'label for second bit',\n      tooltip: 'more info about this bit'\n    }\n  ]);\n\n  <Rainbow title=\"My Chart\" data={ myImmutableData } />\n\n@class Rainbow\n@constructor","methods":[{"name":"mainClasses","docblock":"Main Class getter\n\n@method mainClasses\n@return {String} Main className","modifiers":[],"params":[],"returns":{"description":"Main className","type":{"name":"String"}},"description":"Main Class getter"}],"props":{"title":{"type":{"name":"string"},"required":false,"description":"A title for the component.\n\n@property title\n@type {String}"},"data":{"type":{"name":"object"},"required":true,"description":"The data set for the component.\n\n@property data\n@type {Object}"},"config":{"type":{"name":"object"},"required":false,"description":"Custom chart config for the component.\n\n@property config\n@type {Object}"}}}],"src/components/row/row.js":[{"description":"A row widget.\n\nThis is a standalone row widget used for layout; for table rows use the table-row widget.\n\n== How to use a Row in a component:\n\nIn your file\n\n  import Row from 'carbon/lib/components/row';\n\nTo render the Row:\n\n  <Row />\n\n@class Row\n@constructor","methods":[{"name":"mainClasses","docblock":"Main Class getter\n\n@method mainClasses\n@return {String} Main className","modifiers":[],"params":[],"returns":{"description":"Main className","type":{"name":"String"}},"description":"Main Class getter"}],"props":{"children":{"type":{"name":"union","value":[{"name":"array"},{"name":"object"}]},"required":false,"description":"The elements to be rendered in the row\n\n@property children\n@type {Object | Array}"},"gutter":{"type":{"name":"string"},"required":false,"description":"Pass a custom value for the gutter\n(extra-small, small, medium, large or extra-large)\n\n@property gutter\n@type {String}","defaultValue":{"value":"\"medium\"","computed":false}},"columnDivide":{"type":{"name":"bool"},"required":false,"description":"Show a divide between columns\n\n@property columnDivide\n@type {String}"}}}],"src/components/settings-row/settings-row.js":[{"description":"UI for a settings page row\n\nSettingsRow implements our UX design for settings pages. It accepts a `title` string to be displayed at the top left\nof the row. The `description` property accepts a string or JSX object to support flexible layout of elements\n(e.g. Links, bolded text, paragraphs) in the header column under the title. The default divider line at the bottom\nof the row may be disabled by setting `divider={ false }`. All children are rendered in the input column to the\nright of the header column.\n\n\n== How to use a SettingsRow in a component:\n\nIn your file:\n\n   import SettingsRow from 'carbon/lib/components/settings-row';\n\nTo render the SettingsRow:\n\n   <SettingsRow title='My Setting' description={ <span>My description</span> }>\n     <Checkbox label='Enable my setting' />\n     <span>Other content to go with input</span>\n   </SettingsRow>\n\n@class SettingsRow\n@constructor","methods":[{"name":"classes","docblock":"Return class names\n\n@method  classes\n@return  {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Return class names"},{"name":"heading","docblock":"Return heading\n\n@method  heading\n@return  {Object}  JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Return heading"}],"props":{"children":{"type":{"name":"node"},"required":false,"description":"Component children\n\n@property  children\n@type      {Object}"},"title":{"type":{"name":"string"},"required":false,"description":"Heading title\n\n@property  title\n@type      {String}"},"description":{"type":{"name":"node"},"required":false,"description":"Heading description\n\n@property  description\n@type      {Node}"},"divider":{"type":{"name":"bool"},"required":false,"description":"Row divider\n\n@property  divider\n@type      {Boolean}\n@default   true","defaultValue":{"value":"true","computed":false}}}}],"src/components/show-edit-pod/show-edit-pod.js":[{"description":"","methods":[{"name":"stateControlled","docblock":"True if the component is controlled by state\n\n@method stateControlled\n@return {Boolean}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Boolean"}},"description":"True if the component is controlled by state"},{"name":"mainClasses","docblock":"Returns classes for top level div\n\n@method mainClasses","modifiers":[],"params":[],"returns":null,"description":"Returns classes for top level div"},{"name":"deleteButton","docblock":"Returns the delete button\n\n@method mainClasses","modifiers":[],"params":[],"returns":null,"description":"Returns the delete button"},{"name":"editContent","docblock":"Get the content for when the component is in edit mode\n\n@method editContent","modifiers":[],"params":[],"returns":null,"description":"Get the content for when the component is in edit mode"},{"name":"content","docblock":"Determines the content to render\n\n@method content","modifiers":[],"params":[],"returns":null,"description":"Determines the content to render"},{"name":"contentProps","docblock":"Determines props for show content\n\n@method content","modifiers":[],"params":[],"returns":null,"description":"Determines props for show content"},{"name":"editingProps","docblock":"Determines props for edit content\n\n@method content","modifiers":[],"params":[],"returns":null,"description":"Determines props for edit content"},{"name":"podProps","docblock":"Determines which props to return\n\n@method content","modifiers":[],"params":[],"returns":null,"description":"Determines which props to return"}],"props":{"editing":{"type":{"name":"bool"},"required":false,"description":"Determines the editing state of the show edit pod\nMust be set to true/false onMount if you want to control\nthe pod externally via props\n\n@property editing\n@type {Boolean}"},"onEdit":{"type":{"name":"union","value":[{"name":"func"},{"name":"bool"}]},"required":false,"description":"Callback when edit button is clicked\n\n@property onEdit\n@type {Function}"},"onDelete":{"type":{"name":"func"},"required":false,"description":"Shows delete button when provided\nCalled when delete button is clicked\n\n@property onDelete\n@type {Function}"},"editFields":{"type":{"name":"node"},"required":false,"description":"JSX of fields to appear when in edit mode\n\n@property editFields\n@type {JSX}"},"title":{"type":{"name":"union","value":[{"name":"string"},{"name":"object"}]},"required":false,"description":"Title to display in pod\n\n@property title\n@type {String}"},"transitionName":{"type":{"name":"string"},"required":false,"description":"Transition Name, Override for custom state transition\n\n@property transitionName\n@type {String}\n@default 'carbon-show-edit-pod__transition'","defaultValue":{"value":"'carbon-show-edit-pod__transition'","computed":false}},"afterFormValidation":{"type":{"name":"func"},"required":false,"description":""},"beforeFormValidation":{"type":{"name":"func"},"required":false,"description":""},"buttonAlign":{"type":{"name":"string"},"required":false,"description":""},"cancel":{"type":{"name":"bool"},"required":false,"description":""},"cancelText":{"type":{"name":"string"},"required":false,"description":""},"onCancel":{"type":{"name":"func"},"required":false,"description":""},"saveText":{"type":{"name":"string"},"required":false,"description":""},"deleteText":{"type":{"name":"string"},"required":false,"description":""},"saving":{"type":{"name":"bool"},"required":false,"description":""},"validateOnMount":{"type":{"name":"bool"},"required":false,"description":""},"additionalActions":{"type":{"name":"node"},"required":false,"description":""},"as":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'transparent'","computed":false}},"border":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"false","computed":false}}}}],"src/components/sidebar/sidebar-header/sidebar-header.js":[{"description":"A Sidebar Header widget.\n\nSidebar header can be used as a first child of the Sidebar component\n\n== How to use a Sidebar Header in a component:\n\nIn your file\n\n  import { Sidebar, SidebarHeader } from 'carbon/lib/components/sidebar';\n\nTo render the Sidebar Header:\n\n  <Sidebar\n    onClose={ closeSidebar }\n    open={ true }\n  >\n  <SidebarHeader />\n  </Sidebar>\n\n@class SidebarHeader\n@constructor","methods":[{"name":"mainClasses","docblock":"Returns classes for the component.\n\n@method mainClasses\n@return {String} Main className","modifiers":[],"params":[],"returns":{"description":"Main className","type":{"name":"String"}},"description":"Returns classes for the component."}],"props":{"children":{"type":{"name":"node"},"required":false,"description":"Required prop which will be the content\nof the sidebar header\n\n@property children\n@type {Multiple}"}}}],"src/components/simple-color-picker/color-option/color-option.js":[{"description":"A single square with a color, implemented as a radio button.","methods":[{"name":"inputProps","docblock":"The props used by the Input decorator when creating the input element.","modifiers":[],"params":[],"returns":null,"description":"The props used by the Input decorator when creating the input element."},{"name":"additionalInputContent","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"inputClasses","docblock":"Uses the inputClasses method provided by the decorator to add additional classes.\n\n@method inputClasses\n@return {String} input className","modifiers":[],"params":[],"returns":{"description":"input className","type":{"name":"String"}},"description":"Uses the inputClasses method provided by the decorator to add additional classes."},{"name":"mainClasses","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"_colorSampleClasses","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"_tickedIcon","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"_colorSampleStyle","docblock":null,"modifiers":[],"params":[],"returns":null},{"name":"colorSampleBox","docblock":null,"modifiers":[],"params":[],"returns":null}],"props":{"color":{"type":{"name":"string"},"required":false,"description":"the value of the color that is represented by this ColorOption.\n\n@property color\n@type {String}"},"name":{"type":{"name":"string"},"required":false,"description":"the input name.\n\n@property name\n@type {String}"},"onChange":{"type":{"name":"func"},"required":false,"description":"called when the user selects or deselects this color option.\n\n@property onChange\n@type {Function}"},"checked":{"type":{"name":"bool"},"required":false,"description":"determines if this color option is selected or unselected.\n\n@property checked\n@type {Boolean}"}}}],"src/components/simple-color-picker/simple-color-picker.js":[{"description":"A component that displays squares with color samples that\nyou can choose from.\n\n== How to use a SimpleColorPicker in a component:\n\n  import SimpleColorPicker from 'carbon/lib/components/simple-color-picker';\n\n  <SimpleColorPicker\n    availableColors={ ['transparent', '#ff0102', '#34ff01'] }\n    selectedColor=\"#34ff01\"\n    name=\"settings[color_of_something]\"\n  />","methods":[{"name":"_isOptionChecked","docblock":"Returns true if the color passed as argument is currently\nchecked.\n\n@method isOptionChecked\n@private\n@return {Boolean}","modifiers":[],"params":[{"name":"color"}],"returns":{"description":null,"type":{"name":"Boolean"}},"description":"Returns true if the color passed as argument is currently\nchecked."},{"name":"_colorOption","docblock":"Returns a ColorOption component for a given color.\n\n@method colorOption\n@private\n@return {Object} JSX","modifiers":[],"params":[{"name":"color"}],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns a ColorOption component for a given color."},{"name":"_colorOptions","docblock":"Returns ColorOption components for all available colors.\n\n@method colorOptions\n@private\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns ColorOption components for all available colors."}],"props":{"availableColors":{"type":{"name":"array"},"required":false,"description":"an array with all available colors that will be shown it the color picker.\n\n@property availableColors\n@type {Array}"},"selectedColor":{"type":{"name":"string"},"required":false,"description":"the value of the currently selected color.\n\n@property selectedColor\n@type {String}"},"name":{"type":{"name":"string"},"required":false,"description":"the name of the input element.\n\n@property name\n@type {String}"},"onChange":{"type":{"name":"func"},"required":false,"description":"a callback when the user changes the selected color.\n\n@property onChange\n@type {Function}"}}}],"src/components/spinner/spinner.js":[{"description":"A Spinner widget.\n\n== How to use a Spinner in a component:\n\nIn your file\n\n  import Spinner from 'carbon/lib/components/spinner';\n\nTo render the Spinner:\n\n  <Spinner />\n\nYou can pass a 'size' property to adjust the size of the spinner\n   The default is medium\n   options: extra-small, small, medium-small, medium, medium-large, large and extra-large\n\nFor additional properties specific to this component, see propTypes.\n\n@class Spinner\n@constructor","methods":[{"name":"spinnerClasses","docblock":"Returns classes for the spinner.\n\n@method spinnerClasses\n@return {String} spinner className","modifiers":[],"params":[],"returns":{"description":"spinner className","type":{"name":"String"}},"description":"Returns classes for the spinner."}],"props":{"as":{"type":{"name":"string"},"required":false,"description":"Sets the theme for the component.\n(see the 'utils/colors/$colorIconSets' for possible values)\n\n@property as\n@type {String}\n@default info","defaultValue":{"value":"'info'","computed":false}},"size":{"type":{"name":"string"},"required":false,"description":"Size of the spinner\nOptions: extra-small, small, medium-small, medium, medium-large, large and extra-large\n\n@property size\n@type {String}","defaultValue":{"value":"'medium'","computed":false}}}}],"src/components/split-button/split-button.js":[{"description":"A SplitButton widget.\n\n== How to use a SplitButton in a component:\n\nIn your file\n\n  import SplitButton from 'components/split-button';\n\nTo render a SplitButton (developer can add any buttons to dropdown):\n\n  <SplitButton text=\"Main Button\" onClick={clickHandler}>\n    <Button onClick=\"buttonClickHandler1\">Button name 1</Button>\n    <Button onClick=\"buttonClickHandler2\">Button name 2</Button>\n  </SplitButton>\n\n@class SplitButton\n@constructor","methods":[{"name":"mainClasses","docblock":"Returns classes for the component.\n\n@method mainClasses\n@return {String} Main className","modifiers":[],"params":[],"returns":{"description":"Main className","type":{"name":"String"}},"description":"Returns classes for the component."},{"name":"additionalButtonsClasses","docblock":"Returns classes for the additional actions.\n\n@method mainClasses\n@return {String} Main className","modifiers":[],"params":[],"returns":{"description":"Main className","type":{"name":"String"}},"description":"Returns classes for the additional actions."},{"name":"toggleButtonClasses","docblock":"Returns classes for toggle button.\n\n@method mainClasses\n@return {String} Main className","modifiers":[],"params":[],"returns":{"description":"Main className","type":{"name":"String"}},"description":"Returns classes for toggle button."},{"name":"mainButtonProps","docblock":"Returns props for the main button.\n\n@method mainButtonProps\n@return {Object}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Object"}},"description":"Returns props for the main button."},{"name":"toggleButtonProps","docblock":"Returns props for the toggle.\n\n@method toggleButtonProps\n@return {Object}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Object"}},"description":"Returns props for the toggle."},{"name":"renderMainButton","docblock":"Returns the HTML for the main button.\n\n@method renderMainButton\n@return {Object}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Object"}},"description":"Returns the HTML for the main button."},{"name":"renderAdditionalButtons","docblock":"Returns the HTML for the additional buttons.\n\n@method renderAdditionalButtons\n@return {Object}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Object"}},"description":"Returns the HTML for the additional buttons."}],"props":{"as":{"type":{"name":"string"},"required":false,"description":"Customizes the appearance, can be set to 'primary' or 'secondary'.\n\n@property as\n@type {String}\n@default 'secondary'","defaultValue":{"value":"'secondary'","computed":false}},"text":{"type":{"name":"string"},"required":true,"description":"The text to be displayed in the SplitButton.\n\n@property text\n@type {String}"},"disabled":{"type":{"name":"bool"},"required":false,"description":"Gives the button a disabled state.\n\n@property boolean\n@type {Boolean}\n@default false","defaultValue":{"value":"false","computed":false}}}}],"src/components/table/table-cell/table-cell.js":[{"description":"A TableCell widget.\n\n== How to use a TableCell in a component:\n\nSee documentation for Table component.\n\nYou can set a property of 'align' which should be a string. This will\nalign the content to either \"left\", \"center\" or \"right\".\n\nYou can set a property of 'action' which should be a boolean. This will\nset styling options for the cell used for action such as delete.\n\n@class TableCell\n@constructor","methods":[{"name":"tableCellClasses","docblock":"Returns classes to be used on the TD element.\n\n@method tableCellClasses\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns classes to be used on the TD element."},{"name":"tableCellProps","docblock":"Returns props to be used on the TD element.\n\n@method tableCellProps\n@return {Object}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Object"}},"description":"Returns props to be used on the TD element."}],"props":{"align":{"type":{"name":"string"},"required":false,"description":"Defines the alignment of the cell (eg \"left\", \"center\" or \"right\").\n\n@property align\n@type {String}"},"action":{"type":{"name":"bool"},"required":false,"description":"Defines the cell type to be an action - used for the delete cell.\n\n@property action\n@type {Boolean}"}}}],"src/components/table/table-header/table-header.js":[{"description":"A TableHeader widget.\n\n== How to use a TableHeader in a component:\n\nSee documentation for Table component.\n\nYou can set a property of 'align' which should be a string. This will\nalign the content to either \"left\", \"center\" or \"right\".\n\n== Sortable Columns:\n\nTo make a column sortable, pass a prop of 'sortable={ true }' to the corresponding\nTableHeader.\nSortable columns also require a 'name' prop which must correspond to the database key.\n\nYou can also provide a custom sortOrder - 'asc' (ascending) or 'desc' (descending).\nBy Default columns are sorted in ascending order.\n\nSee the Table documentation for more information on hooking up a change handler\nto setup sort functionality in your app.\n\n@class TableHeader\n@constructor","methods":[{"name":"sorted","docblock":"Determines if this column is currently sorted.\n\n@method sorted\n@return {Boolean}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Boolean"}},"description":"Determines if this column is currently sorted."},{"name":"sortIconHTML","docblock":"Returns sort icon HTML if column is sortable and has been sorted.\n\n@method sortIconHTML\n@return {JSX} Icon JSX","modifiers":[],"params":[],"returns":{"description":"Icon JSX","type":{"name":"JSX"}},"description":"Returns sort icon HTML if column is sortable and has been sorted."},{"name":"sortIconClasses","docblock":"Returns classes to apply to the sort icon\n\n@method sortIconClasses\n@return {JSX} Icon JSX","modifiers":[],"params":[],"returns":{"description":"Icon JSX","type":{"name":"JSX"}},"description":"Returns classes to apply to the sort icon"},{"name":"tableHeaderClasses","docblock":"Returns classes to be used on the TH element.\n\n@method tableHeaderClasses\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns classes to be used on the TH element."},{"name":"tableHeaderProps","docblock":"Returns props to be used on the TH element.\n\n@method tableHeaderProps\n@return {Object}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Object"}},"description":"Returns props to be used on the TH element."}],"props":{"align":{"type":{"name":"string"},"required":false,"description":"Aligns the content of the cell (can be \"left\", \"center\" or \"right\").\n\n@property align\n@type {String}"},"name":{"type":{"name":"custom","raw":"function(props, propName) {\n  if (props.sortable) {\n    if (!props[propName]) {\n      throw new Error('Sortable columns require a prop of name of type String');\n    }\n    if (typeof props[propName] !== 'string') {\n      throw new Error('name must be a string');\n    }\n  }\n}"},"required":false,"description":"Name of the column to sort. Should correspond to name in database.\n\n@property name\n@type {String}"},"sortable":{"type":{"name":"bool"},"required":false,"description":"Whether column is sortable.\n\n@property sortable\n@type {Boolean}"}}}],"src/components/table/table-row/table-row.js":[{"description":"A TableRow widget.\n\n== How to use a TableRow in a component:\n\nSee documentation for Table component.\n\nIf you add an onClick event to a Table Row, will display the cursor as a pointer\nwhen hovering over the row.\n\n@class TableRow\n@constructor","methods":[{"name":"mainClasses","docblock":"Classes to be applied to the table row component\n\n@method mainClasses Main Class getter","modifiers":[],"params":[],"returns":null,"description":"Classes to be applied to the table row component"},{"name":"rowProps","docblock":"Sets additional props to the row.\n\n@method rowProps\n@return {Object}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Object"}},"description":"Sets additional props to the row."},{"name":"isHeader","docblock":"Determines if the developer has flagged this row as a header.\n\n@method isHeader\n@return {Boolean}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Boolean"}},"description":"Determines if the developer has flagged this row as a header."},{"name":"multiSelectCell","docblock":"Determines what kind of cell to render for the checkbox.\n\n@method multiSelectCell\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Determines what kind of cell to render for the checkbox."},{"name":"multiSelect","docblock":"Returns the checkbox for the select action.\n\n@method multiSelect\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns the checkbox for the select action."},{"name":"shouldHaveMultiSelectColumn","docblock":"Determines if the row should have a multi select column.\n\n@method shouldHaveMultiSelectColumn\n@return {Boolean}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Boolean"}},"description":"Determines if the row should have a multi select column."},{"name":"requiresUniqueID","docblock":"Determines if the row requires a unique ID.\n\n@method requiresUniqueID\n@return {Boolean}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Boolean"}},"description":"Determines if the row requires a unique ID."}],"props":{"selectable":{"type":{"name":"bool"},"required":false,"description":"Enables multi-selectable table rows.\n\n@property selectable\n@type {Boolean}"},"highlightable":{"type":{"name":"bool"},"required":false,"description":"Enables highlightable table rows.\n\n@property highlightable\n@type {Boolean}"},"selected":{"type":{"name":"bool"},"required":false,"description":"Allows developers to manually control selected state for the row.\n\n@property selected\n@type {Boolean}"},"highlighted":{"type":{"name":"bool"},"required":false,"description":"Allows developers to manually control highlighted state for the row.\n\n@property highlighted\n@type {Boolean}"},"uniqueID":{"type":{"name":"string"},"required":false,"description":"Define a unique ID so the table can track the row (useful for highlightable or selectable rows).\n\n@property uniqueID\n@type {String}"},"as":{"type":{"name":"string"},"required":false,"description":"What the row should be displayed as, set to 'header' to display as header\n\n@property as\n@type {String}"},"hideMultiSelect":{"type":{"name":"bool"},"required":false,"description":"Whether to hide the multiSelect\n\n@property hideMultiSelect\n@type {Boolean}"},"selectAll":{"type":{"name":"bool"},"required":false,"description":"Whether to select all\n\n@property selectAll\n@type {Boolean}"},"onHighlight":{"type":{"name":"func"},"required":false,"description":"Callback for when a row is highlighted\n@property onHighlight\n@type {Function}"}}}],"src/components/table/table.js":[{"description":"A Table widget.\n\n== How to use a Table in a component:\n\nIn your file:\n\n  import { Table, TableRow, TableCell, TableHeader } from 'carbon/lib/components/table';\n\nTo render a Table:\n\n  // map data to table rows\n  let tableRows = (\n    this.props.data.map((datum, key) => {\n      return (\n        <TableRow>\n          <TableCell>\n            { datum.firstName }\n          </TableCell>\n\n          <TableCell>\n            { datum.lastName }\n          </TableCell>\n        </TableRow>\n      );\n    });\n  );\n\n  // prepend array of rows with a header row\n  tableRows.unshift(\n    <TableRow>\n      <TableHeader>First Name</TableHeader>\n      <TableHeader>Last Name</TableHeader>\n    </TableRow>\n  );\n\n  // render the table with the table rows\n  <Table>\n    { tableRows }\n  </Table>\n\n== Pagination\n\nTo add a pagination footer to the table you will need to pass some extra props to the table\n\n let sizeOptions = Immutable.fromJS([{ id: '10', name: 10 }, { id: '25', name: 25 }, { id: '50', name: 50 }]),\n\n<Table\n  paginate={ true }                        // Show the pagination footer\n  currentPage='1'                          // Required - Current visible page\n  pageSize='10'                            // Required - Number of records to show per page\n  totalRecords                             // Required - Total number of records\n  showPageSizeSelection={ false }          // Options  - Show page size selection\n  pageSizeSelectionOptions={ sizeOptions } // Optional - Page Size Options\n  thead={ TableRow }                       // Optional - A TableRow to be wrapped in <thead>\n/>\n\n== Sorting\n\n To enable column sorting, you will need to configure the Table Header component.\nSee the Table Header component documentation.\n\n@class Table\n@constructor","methods":[{"name":"resetTableHeight","docblock":"Reset the minHeight and tableHeight of the table\n\n@method resetTableHeight\n@return {Void}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Void"}},"description":"Reset the minHeight and tableHeight of the table"},{"name":"resizeTable","docblock":"Increase the minheight of the table if the new height\nis greater than the previous\n\n@method resizeTable\n@return {Void}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Void"}},"description":"Increase the minheight of the table if the new height\nis greater than the previous"},{"name":"shouldResetTableHeight","docblock":"Test if the table height should be reset to 0\n\n@method shouldResetTableHeight\n@param prevProps - props before update\n@return {Boolean}","modifiers":[],"params":[{"name":"prevProps","description":"props before update","type":null}],"returns":{"description":null,"type":{"name":"Boolean"}},"description":"Test if the table height should be reset to 0"},{"name":"pageSize","docblock":"Get pageSize for table\n\n@method pageSize\n@return {String} table page size","modifiers":[],"params":[],"returns":{"description":"table page size","type":{"name":"String"}},"description":"Get pageSize for table"},{"name":"sortedColumn","docblock":"Returns the currently sorted column.\n\n@method sortedColumn\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns the currently sorted column."},{"name":"sortOrder","docblock":"Returns the current sort order.\n\n@method sortOrder\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Returns the current sort order."},{"name":"pagerProps","docblock":"Props to pass to pager component\n\n@method pagerProps\n@return {Object} props","modifiers":[],"params":[],"returns":{"description":"props","type":{"name":"Object"}},"description":"Props to pass to pager component"},{"name":"defaultPageSize","docblock":"Page size for page load\n\n@method defaultPageSize\n@return {Void}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Void"}},"description":"Page size for page load"},{"name":"pager","docblock":"Returns the pager if paginate is true\n\n@method pager\n@return {JSX} pager","modifiers":[],"params":[],"returns":{"description":"pager","type":{"name":"JSX"}},"description":"Returns the pager if paginate is true"},{"name":"mainClasses","docblock":"Classes that apply to the parent table div\n\n@method mainClasses\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Classes that apply to the parent table div"},{"name":"wrapperClasses","docblock":"Classes that apply to the table wrapper\n\n@method wrapperClasses\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Classes that apply to the table wrapper"},{"name":"tableClasses","docblock":"Classes to apply to the table\n\n@method tableClasses\n@return {String}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"String"}},"description":"Classes to apply to the table"},{"name":"thead","docblock":"Returns thead content wrapped in <thead>\n\n@method thead\n@return {JSX}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"JSX"}},"description":"Returns thead content wrapped in <thead>"},{"name":"actionToolbar","docblock":"Returns the component for the action toolbar.\n\n@method actionToolbar\n@return {JSX}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"JSX"}},"description":"Returns the component for the action toolbar."},{"name":"loadingRow","docblock":"Returns a row to be used for loading.\n\n@method loadingRow\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns a row to be used for loading."},{"name":"emptyRow","docblock":"Returns a row to be used for no data.\n\n@method emptyRow\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns a row to be used for no data."},{"name":"tableContent","docblock":"Works out what content to display in the table.\n\n@method tableContent\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Works out what content to display in the table."},{"name":"tbody","docblock":"Returns the content, wrapped in a tbody.\n\n@method tbody\n@return {Object} JSX","modifiers":[],"params":[],"returns":{"description":"JSX","type":{"name":"Object"}},"description":"Returns the content, wrapped in a tbody."}],"props":{"filter":{"type":{"name":"object"},"required":false,"description":"Data used to filter the data\n\n@property filter\n@type {Object}"},"onChange":{"type":{"name":"func"},"required":false,"description":"Emitted when table component changes e.g.\nPager, sorting, filter\n\n@property onChange\n@type {Function}"},"paginate":{"type":{"name":"bool"},"required":false,"description":"Show the pagination footer\n\n@property paginate\n@type {Boolean}"},"currentPage":{"type":{"name":"string"},"required":false,"description":"Pagination\nCurrent Visible Page\n\n@property currentPage\n@type {String}"},"pageSize":{"type":{"name":"string"},"required":false,"description":"Pagination\nPage Size of grid (number of visible records)\n\n@property pageSize\n@type {String}"},"pageSizeSelectionOptions":{"type":{"name":"object"},"required":false,"description":"Pagination\nOptions for pageSize default - 10, 25, 50\n\n@property pageSizeSelectionOptions\n@type {Object} Immutable"},"showPageSizeSelection":{"type":{"name":"bool"},"required":false,"description":"Pagination\nIs the page size dropdown visible\n\n@property showPageSizeSelection\n@type {Boolean}"},"selectable":{"type":{"name":"bool"},"required":false,"description":"Enables multi-selectable table rows.\n\n@property selectable\n@type {Boolean}"},"highlightable":{"type":{"name":"bool"},"required":false,"description":"Enables highlightable table rows.\n\n@property highlightable\n@type {Boolean}"},"onSelect":{"type":{"name":"func"},"required":false,"description":"A callback for when a row is selected.\n\n@property onSelect\n@type {Function}"},"onHighlight":{"type":{"name":"func"},"required":false,"description":"A callback for when a row is highlighted.\n\n@property onHighlight\n@type {Function}"},"onPageSizeChange":{"type":{"name":"func"},"required":false,"description":"A callback for when the page size changes.\n\n@property onPageSizeChange\n@type {Function}"},"totalRecords":{"type":{"name":"string"},"required":false,"description":"Pagination\nTotal number of records in the grid\n\n@property totalRecords\n@type {String}"},"shrink":{"type":{"name":"bool"},"required":false,"description":"Allow table to shrink in size.\n\n@property shrink\n@type {Boolean}"},"thead":{"type":{"name":"object"},"required":false,"description":"TableRows to be wrapped in <thead>\n\n@property thead\n@type {Object}"},"tbody":{"type":{"name":"bool"},"required":false,"description":"Determines if you want the table to automatically render a tbody.\n\n@property tbody\n@type {Object}"}}}],"src/components/tabs/tab/tab.js":[{"description":"A Tab widget.\n\n== How to use a Tab Widget in a component:\n See Tabs component\n\n@class Tab\n@constructor","methods":[{"name":"mainClasses","docblock":"Classes to be applied to the single tab component\n\n@method mainClasses Main Class getter","modifiers":[],"params":[],"returns":null,"description":"Classes to be applied to the single tab component"}],"props":{"title":{"type":{"name":"string"},"required":true,"description":"Visible title in tabs header\nConsumed within tabs component\n\n@property title\n@type {String}"},"tabId":{"type":{"name":"string"},"required":true,"description":"id to identify the tab within the component\nused when validating and switching tabs\n\n@property tabId\n@type {String}"}}}],"src/components/tabs/tabs.js":[{"description":"A Tabs widget.\n\n== How to use a Tabs Widget in a component:\n\nIn your file\n\n  import { Tabs, Tab } from 'components/tabs';\n\nTo render a Tabs Widget:\n\n  <Tabs>\n    <Tab title='Title 1' tabId='uniqueId1'>\n\n      <Textbox />\n      <Textbox />\n\n    </Tab>\n\n    <Tab title='Title 2' tabId='uniqueId2'>\n\n      <Date />\n      <Textbox />\n\n    </Tab>\n  </Tabs>\n\nOptionally, you can pass `renderHiddenTabs` prop to the Tabs. By default this is\nset to true and therefore all tabs will be rendered. The selected tab will have\na class of `selected` and all other tabs will have a class of `hidden` which sets\ntheir display to `none`.\n\nSetting `renderHiddenTabs to false will add a small performance improvement as\nall previously hidden tabs will not be rendered to the page.\n\nIf you are using the tab component within a form all tabs should be rendered so that\nform validation can work correctly.\n\nThe tabs widget also allows you to select a tab on page load. By default this is set\nto the first tab. To set a different tab on page load pass a tabId to the\nselectedTabId prop as shown in the example below.\n\nTo render a Tabs Widget with Options:\n\n  <Tabs renderHiddenTabs={ false } selectedTabId='uniqueId2' >\n    <Tab title='Title 1' tabId='uniqueId1'>\n\n      <Textbox />\n      <Textbox />\n\n    </Tab>\n\n    <Tab title='Title 2' tabId='uniqueId2'>\n\n      <Date />\n      <Textbox />\n\n    </Tab>\n  </Tabs>\n\n@class Tabs\n@constructor","methods":[{"name":"updateVisibleTab","docblock":null,"modifiers":[],"params":[{"name":"tabid","type":null}],"returns":null},{"name":"mainClasses","docblock":"Classes to be applied to the whole tabs component\n\n@method mainClasses Main Class getter","modifiers":[],"params":[],"returns":null,"description":"Classes to be applied to the whole tabs component"},{"name":"tabHeaders","docblock":"Build the headers for the tab component\n\n@method tabHeaders\n@return Unordered list of tab titles","modifiers":[],"params":[],"returns":{"description":"Unordered list of tab titles","type":null},"description":"Build the headers for the tab component"},{"name":"visibleTab","docblock":"Builds the single currently selected tab\n\n@method visibleTab\n@return {JSX} visible tab","modifiers":[],"params":[],"returns":{"description":"visible tab","type":{"name":"JSX"}},"description":"Builds the single currently selected tab"},{"name":"tabs","docblock":"Builds all tabs where non selected tabs have class of hidden\n\n@method tabs\n@return {JSX} all tabs","modifiers":[],"params":[],"returns":{"description":"all tabs","type":{"name":"JSX"}},"description":"Builds all tabs where non selected tabs have class of hidden"}],"props":{"renderHiddenTabs":{"type":{"name":"bool"},"required":false,"description":"Should the unfocussed tabs be rendered to the page\n\n@property renderHiddenTabs\n@type {Boolean}\n@default true","defaultValue":{"value":"true","computed":false}},"selectedTabId":{"type":{"name":"string"},"required":false,"description":"The tab to be displayed updating this prop will change the visible tab.\nDefaults to the first tab upon initial load.\n\n@property selectedTabId\n@type {String}\n@default firstTab"},"children":{"type":{"name":"union","value":[{"name":"array"},{"name":"object"}]},"required":true,"description":"Individual tabs\n\n@property children\n@type {Object | Array}"},"align":{"type":{"name":"string"},"required":false,"description":"Aligns the tab headers\n\n@property align\n@type {String}","defaultValue":{"value":"'left'","computed":false}},"onTabChange":{"type":{"name":"func"},"required":false,"description":"Emitted when the visible tab is changed\n\n@property onTabChange\n@type {Func}"},"position":{"type":{"name":"string"},"required":false,"description":"The position of tabs with respect to the content (top (default) or left)\n\n@property position\n@type {String}","defaultValue":{"value":"'top'","computed":false}}}}],"src/components/textarea/textarea.js":[{"description":"A textarea widget.\n\n== How to use a Textarea in a component:\n\nIn your file:\n\n  import Textarea from 'carbon/lib/components/textarea';\n\nTo render a Textarea:\n\n  <Textarea name=\"myTextarea\" />\n\n@class Textarea\n@constructor\n@decorators {Input,InputLabel,InputValidation}","methods":[{"name":"mainClasses","docblock":"Uses the mainClasses method provided by the decorator to add additional classes\n\n@method mainClasses\n@return {String} main className","modifiers":[],"params":[],"returns":{"description":"main className","type":{"name":"String"}},"description":"Uses the mainClasses method provided by the decorator to add additional classes"},{"name":"inputClasses","docblock":"Uses the inputClasses method provided by the decorator to add additional classes.\n\n@method inputClasses\n@return {String} input className","modifiers":[],"params":[],"returns":{"description":"input className","type":{"name":"String"}},"description":"Uses the inputClasses method provided by the decorator to add additional classes."},{"name":"inputProps","docblock":"A getter that combines props passed down from the input decorator with\ntextbox specific props.\n\n@method inputProps\n@return {Object} props for the input","modifiers":[],"params":[],"returns":{"description":"props for the input","type":{"name":"Object"}},"description":"A getter that combines props passed down from the input decorator with\ntextbox specific props."},{"name":"i18nNumberOpts","docblock":"I18n options for character count number\n\n@method i18nNumberOpts\n@return {Object}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"Object"}},"description":"I18n options for character count number"},{"name":"inputType","docblock":"Defines a custom input type for this component.\n\n@method inputType\n@return {String} the input type","modifiers":[],"params":[],"returns":{"description":"the input type","type":{"name":"String"}},"description":"Defines a custom input type for this component."},{"name":"characterCount","docblock":"Returns character count jsx if limit is set\n\n@method characterCount\n@return {JSX}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"JSX"}},"description":"Returns character count jsx if limit is set"}],"props":{"expandable":{"type":{"name":"bool"},"required":false,"description":"Allows the Textareas Height to change based on user input\nWidth of the textarea will remain static\n\n@property expandable\n@type {Boolean}\n@default false","defaultValue":{"value":"false","computed":false}},"characterLimit":{"type":{"name":"string"},"required":false,"description":"Character limit of the textarea\n\n@property characterLimit\n@type {String}"},"enforceCharacterLimit":{"type":{"name":"bool"},"required":false,"description":"Stop the user typing over the characterLimit\n\n@property enforceCharacterLimit\n@type {Boolean}\n@default true","defaultValue":{"value":"true","computed":false}}}}],"src/components/textbox/textbox.js":[{"description":"A textbox widget.\n\n== How to use a Textbox in a component:\n\nIn your file\n\n  import Textbox from 'carbon/lib/components/textbox';\n\nTo render a Textbox:\n\n  <Textbox name=\"myTextbox\" />\n\n@class Textbox\n@constructor\n@decorators {Input,InputLabel,InputValidation}","methods":[{"name":"mainClasses","docblock":"Main Class getter\n\n@method mainClasses\n@return {void}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"void"}},"description":"Main Class getter"},{"name":"inputClasses","docblock":"Input class getter\n\n@method inputClasses","modifiers":[],"params":[],"returns":null,"description":"Input class getter"},{"name":"inputProps","docblock":"A getter that combines props passed down from the input decorator with\ntextbox specific props.\n\n@method inputProps\n@return {Object} props for the input","modifiers":[],"params":[],"returns":{"description":"props for the input","type":{"name":"Object"}},"description":"A getter that combines props passed down from the input decorator with\ntextbox specific props."}]}],"src/components/toast/toast.js":[{"description":"A Toast widget.\n\n== How to use a Toast in a component:\n\nIn your file:\n\n  import Toast from 'carbon/lib/components/toast'\n\nTo render the Toast:\n\n  <Toast open={ true } onDismiss={ this.dismissHandler } as='info'>\n    My toast content\n  </Toast>\n\nAdditionally you can pass optional props to the Toast component\n\n  as: Customizes the appearence of the toast changing the colour\n      (see the 'iconColorSets' for possible values).\n\n@class Toast\n@constructor","methods":[{"name":"componentClasses","docblock":"Classes to be applied to the component.\n\n@method componentClasses","modifiers":[],"params":[],"returns":null,"description":"Classes to be applied to the component."},{"name":"dismissIcon","docblock":"Content rendered for dismiss X\n\n@method dismissIcon","modifiers":[],"params":[],"returns":null,"description":"Content rendered for dismiss X"},{"name":"toastContent","docblock":"Content rendered for the toast.\n\n@method toastContent","modifiers":[],"params":[],"returns":null,"description":"Content rendered for the toast."}],"props":{"as":{"type":{"name":"string"},"required":false,"description":"Customizes the appearance through colour\n(see the 'iconColorSets' for possible values)\n\n@property as\n@type {String}\n@default 'warning'","defaultValue":{"value":"'warning'","computed":false}},"open":{"type":{"name":"bool"},"required":false,"description":"Determines if the toast is open.\n\n@property open\n@type {Boolean}\n@default true","defaultValue":{"value":"true","computed":false}},"onDismiss":{"type":{"name":"func"},"required":false,"description":"Callback for when dismissed.\n\n@property onDismiss\n@type {Function}"}}}],"src/components/tooltip/tooltip.js":[{"description":"A Tooltip widget.\n\n== How to use a Tooltip in a component:\n\nIn your file:\n\n  import Tooltip from 'carbon/lib/components/tooltip'\n\nTo render the Tooltip:\n\n  <Tooltip isVisible={ toggleTooltipHandler }>\n    My tooltip content\n  </Tooltip>\n\nYou must pass a prop of 'isVisible' which is toggled to true or false.\n\nYou can pass a prop of 'align' to the component which shifts the alignment of the pointer.\nThis defaults to 'center'.\nYou can also pass a prop of 'position' to the component which shifts the position of the pointer.\nThis defaults to 'bottom'\n\n@class Tooltip\n@constructor","methods":[{"name":"mainClasses","docblock":"Main classes\n\n@method mainClasses\n@return {String} classNames for tooltip","modifiers":[],"params":[],"returns":{"description":"classNames for tooltip","type":{"name":"String"}},"description":"Main classes"},{"name":"tooltipHTML","docblock":"Return HTML for tooltip\n\n@method tooltipHTML\n@return {JSX}","modifiers":[],"params":[],"returns":{"description":null,"type":{"name":"JSX"}},"description":"Return HTML for tooltip"}],"props":{"align":{"type":{"name":"string"},"required":false,"description":"Sets alignment of pointer on tooltip\n\nOptions: top, bottom, center, right, left\n\n@property align\n@type {String}\n@default 'center'","defaultValue":{"value":"'center'","computed":false}},"position":{"type":{"name":"string"},"required":false,"description":"Sets position of the tooltip\n\n\nOptions: top, bottom, right, left\n\n@property position\n@type {String}\n@default 'bottom'","defaultValue":{"value":"'top'","computed":false}},"isVisible":{"type":{"name":"bool"},"required":false,"description":"Whether to to show the Tooltip\n\n@property isVisible\n@type {Boolean}\n@default false","defaultValue":{"value":"false","computed":false}}}}]}
